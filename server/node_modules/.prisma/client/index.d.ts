
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Relationship
 * 
 */
export type Relationship = $Result.DefaultSelection<Prisma.$RelationshipPayload>
/**
 * Model Anniversary
 * 
 */
export type Anniversary = $Result.DefaultSelection<Prisma.$AnniversaryPayload>
/**
 * Model Letter
 * 
 */
export type Letter = $Result.DefaultSelection<Prisma.$LetterPayload>
/**
 * Model Book
 * 
 */
export type Book = $Result.DefaultSelection<Prisma.$BookPayload>
/**
 * Model Reflection
 * 
 */
export type Reflection = $Result.DefaultSelection<Prisma.$ReflectionPayload>
/**
 * Model EmotionAnalytics
 * 
 */
export type EmotionAnalytics = $Result.DefaultSelection<Prisma.$EmotionAnalyticsPayload>
/**
 * Model Insight
 * 
 */
export type Insight = $Result.DefaultSelection<Prisma.$InsightPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.relationship`: Exposes CRUD operations for the **Relationship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relationships
    * const relationships = await prisma.relationship.findMany()
    * ```
    */
  get relationship(): Prisma.RelationshipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.anniversary`: Exposes CRUD operations for the **Anniversary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anniversaries
    * const anniversaries = await prisma.anniversary.findMany()
    * ```
    */
  get anniversary(): Prisma.AnniversaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.letter`: Exposes CRUD operations for the **Letter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Letters
    * const letters = await prisma.letter.findMany()
    * ```
    */
  get letter(): Prisma.LetterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reflection`: Exposes CRUD operations for the **Reflection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reflections
    * const reflections = await prisma.reflection.findMany()
    * ```
    */
  get reflection(): Prisma.ReflectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emotionAnalytics`: Exposes CRUD operations for the **EmotionAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmotionAnalytics
    * const emotionAnalytics = await prisma.emotionAnalytics.findMany()
    * ```
    */
  get emotionAnalytics(): Prisma.EmotionAnalyticsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.insight`: Exposes CRUD operations for the **Insight** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Insights
    * const insights = await prisma.insight.findMany()
    * ```
    */
  get insight(): Prisma.InsightDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Relationship: 'Relationship',
    Anniversary: 'Anniversary',
    Letter: 'Letter',
    Book: 'Book',
    Reflection: 'Reflection',
    EmotionAnalytics: 'EmotionAnalytics',
    Insight: 'Insight'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "relationship" | "anniversary" | "letter" | "book" | "reflection" | "emotionAnalytics" | "insight"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Relationship: {
        payload: Prisma.$RelationshipPayload<ExtArgs>
        fields: Prisma.RelationshipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelationshipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelationshipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          findFirst: {
            args: Prisma.RelationshipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelationshipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          findMany: {
            args: Prisma.RelationshipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>[]
          }
          create: {
            args: Prisma.RelationshipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          createMany: {
            args: Prisma.RelationshipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelationshipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>[]
          }
          delete: {
            args: Prisma.RelationshipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          update: {
            args: Prisma.RelationshipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          deleteMany: {
            args: Prisma.RelationshipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelationshipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RelationshipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>[]
          }
          upsert: {
            args: Prisma.RelationshipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelationshipPayload>
          }
          aggregate: {
            args: Prisma.RelationshipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelationship>
          }
          groupBy: {
            args: Prisma.RelationshipGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelationshipGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelationshipCountArgs<ExtArgs>
            result: $Utils.Optional<RelationshipCountAggregateOutputType> | number
          }
        }
      }
      Anniversary: {
        payload: Prisma.$AnniversaryPayload<ExtArgs>
        fields: Prisma.AnniversaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnniversaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnniversaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          findFirst: {
            args: Prisma.AnniversaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnniversaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          findMany: {
            args: Prisma.AnniversaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>[]
          }
          create: {
            args: Prisma.AnniversaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          createMany: {
            args: Prisma.AnniversaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnniversaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>[]
          }
          delete: {
            args: Prisma.AnniversaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          update: {
            args: Prisma.AnniversaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          deleteMany: {
            args: Prisma.AnniversaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnniversaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnniversaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>[]
          }
          upsert: {
            args: Prisma.AnniversaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnniversaryPayload>
          }
          aggregate: {
            args: Prisma.AnniversaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnniversary>
          }
          groupBy: {
            args: Prisma.AnniversaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnniversaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnniversaryCountArgs<ExtArgs>
            result: $Utils.Optional<AnniversaryCountAggregateOutputType> | number
          }
        }
      }
      Letter: {
        payload: Prisma.$LetterPayload<ExtArgs>
        fields: Prisma.LetterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LetterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LetterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          findFirst: {
            args: Prisma.LetterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LetterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          findMany: {
            args: Prisma.LetterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>[]
          }
          create: {
            args: Prisma.LetterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          createMany: {
            args: Prisma.LetterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LetterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>[]
          }
          delete: {
            args: Prisma.LetterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          update: {
            args: Prisma.LetterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          deleteMany: {
            args: Prisma.LetterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LetterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LetterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>[]
          }
          upsert: {
            args: Prisma.LetterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterPayload>
          }
          aggregate: {
            args: Prisma.LetterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLetter>
          }
          groupBy: {
            args: Prisma.LetterGroupByArgs<ExtArgs>
            result: $Utils.Optional<LetterGroupByOutputType>[]
          }
          count: {
            args: Prisma.LetterCountArgs<ExtArgs>
            result: $Utils.Optional<LetterCountAggregateOutputType> | number
          }
        }
      }
      Book: {
        payload: Prisma.$BookPayload<ExtArgs>
        fields: Prisma.BookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findFirst: {
            args: Prisma.BookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findMany: {
            args: Prisma.BookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          create: {
            args: Prisma.BookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          createMany: {
            args: Prisma.BookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          delete: {
            args: Prisma.BookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          update: {
            args: Prisma.BookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          deleteMany: {
            args: Prisma.BookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          upsert: {
            args: Prisma.BookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          aggregate: {
            args: Prisma.BookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBook>
          }
          groupBy: {
            args: Prisma.BookGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookCountArgs<ExtArgs>
            result: $Utils.Optional<BookCountAggregateOutputType> | number
          }
        }
      }
      Reflection: {
        payload: Prisma.$ReflectionPayload<ExtArgs>
        fields: Prisma.ReflectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReflectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReflectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          findFirst: {
            args: Prisma.ReflectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReflectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          findMany: {
            args: Prisma.ReflectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>[]
          }
          create: {
            args: Prisma.ReflectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          createMany: {
            args: Prisma.ReflectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReflectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>[]
          }
          delete: {
            args: Prisma.ReflectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          update: {
            args: Prisma.ReflectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          deleteMany: {
            args: Prisma.ReflectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReflectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReflectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>[]
          }
          upsert: {
            args: Prisma.ReflectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReflectionPayload>
          }
          aggregate: {
            args: Prisma.ReflectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReflection>
          }
          groupBy: {
            args: Prisma.ReflectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReflectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReflectionCountArgs<ExtArgs>
            result: $Utils.Optional<ReflectionCountAggregateOutputType> | number
          }
        }
      }
      EmotionAnalytics: {
        payload: Prisma.$EmotionAnalyticsPayload<ExtArgs>
        fields: Prisma.EmotionAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmotionAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmotionAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.EmotionAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmotionAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          findMany: {
            args: Prisma.EmotionAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>[]
          }
          create: {
            args: Prisma.EmotionAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          createMany: {
            args: Prisma.EmotionAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmotionAnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>[]
          }
          delete: {
            args: Prisma.EmotionAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          update: {
            args: Prisma.EmotionAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.EmotionAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmotionAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmotionAnalyticsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>[]
          }
          upsert: {
            args: Prisma.EmotionAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmotionAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.EmotionAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmotionAnalytics>
          }
          groupBy: {
            args: Prisma.EmotionAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmotionAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmotionAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<EmotionAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      Insight: {
        payload: Prisma.$InsightPayload<ExtArgs>
        fields: Prisma.InsightFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InsightFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InsightFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findFirst: {
            args: Prisma.InsightFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InsightFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          findMany: {
            args: Prisma.InsightFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          create: {
            args: Prisma.InsightCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          createMany: {
            args: Prisma.InsightCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InsightCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          delete: {
            args: Prisma.InsightDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          update: {
            args: Prisma.InsightUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          deleteMany: {
            args: Prisma.InsightDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InsightUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InsightUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>[]
          }
          upsert: {
            args: Prisma.InsightUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InsightPayload>
          }
          aggregate: {
            args: Prisma.InsightAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInsight>
          }
          groupBy: {
            args: Prisma.InsightGroupByArgs<ExtArgs>
            result: $Utils.Optional<InsightGroupByOutputType>[]
          }
          count: {
            args: Prisma.InsightCountArgs<ExtArgs>
            result: $Utils.Optional<InsightCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    relationship?: RelationshipOmit
    anniversary?: AnniversaryOmit
    letter?: LetterOmit
    book?: BookOmit
    reflection?: ReflectionOmit
    emotionAnalytics?: EmotionAnalyticsOmit
    insight?: InsightOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sentLetters: number
    relationships1: number
    relationships2: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentLetters?: boolean | UserCountOutputTypeCountSentLettersArgs
    relationships1?: boolean | UserCountOutputTypeCountRelationships1Args
    relationships2?: boolean | UserCountOutputTypeCountRelationships2Args
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentLettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LetterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelationships1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRelationships2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
  }


  /**
   * Count Type RelationshipCountOutputType
   */

  export type RelationshipCountOutputType = {
    letters: number
    books: number
    reflections: number
    analytics: number
    insights: number
    anniversaries: number
  }

  export type RelationshipCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    letters?: boolean | RelationshipCountOutputTypeCountLettersArgs
    books?: boolean | RelationshipCountOutputTypeCountBooksArgs
    reflections?: boolean | RelationshipCountOutputTypeCountReflectionsArgs
    analytics?: boolean | RelationshipCountOutputTypeCountAnalyticsArgs
    insights?: boolean | RelationshipCountOutputTypeCountInsightsArgs
    anniversaries?: boolean | RelationshipCountOutputTypeCountAnniversariesArgs
  }

  // Custom InputTypes
  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelationshipCountOutputType
     */
    select?: RelationshipCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountLettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LetterWhereInput
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountReflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReflectionWhereInput
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmotionAnalyticsWhereInput
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountInsightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
  }

  /**
   * RelationshipCountOutputType without action
   */
  export type RelationshipCountOutputTypeCountAnniversariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnniversaryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    sentLetters?: boolean | User$sentLettersArgs<ExtArgs>
    relationships1?: boolean | User$relationships1Args<ExtArgs>
    relationships2?: boolean | User$relationships2Args<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentLetters?: boolean | User$sentLettersArgs<ExtArgs>
    relationships1?: boolean | User$relationships1Args<ExtArgs>
    relationships2?: boolean | User$relationships2Args<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sentLetters: Prisma.$LetterPayload<ExtArgs>[]
      relationships1: Prisma.$RelationshipPayload<ExtArgs>[]
      relationships2: Prisma.$RelationshipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sentLetters<T extends User$sentLettersArgs<ExtArgs> = {}>(args?: Subset<T, User$sentLettersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relationships1<T extends User$relationships1Args<ExtArgs> = {}>(args?: Subset<T, User$relationships1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relationships2<T extends User$relationships2Args<ExtArgs> = {}>(args?: Subset<T, User$relationships2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sentLetters
   */
  export type User$sentLettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    where?: LetterWhereInput
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    cursor?: LetterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LetterScalarFieldEnum | LetterScalarFieldEnum[]
  }

  /**
   * User.relationships1
   */
  export type User$relationships1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    cursor?: RelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * User.relationships2
   */
  export type User$relationships2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    cursor?: RelationshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Relationship
   */

  export type AggregateRelationship = {
    _count: RelationshipCountAggregateOutputType | null
    _min: RelationshipMinAggregateOutputType | null
    _max: RelationshipMaxAggregateOutputType | null
  }

  export type RelationshipMinAggregateOutputType = {
    id: string | null
    user1Id: string | null
    user2Id: string | null
    inviteCode: string | null
    connectedAt: Date | null
    createdAt: Date | null
  }

  export type RelationshipMaxAggregateOutputType = {
    id: string | null
    user1Id: string | null
    user2Id: string | null
    inviteCode: string | null
    connectedAt: Date | null
    createdAt: Date | null
  }

  export type RelationshipCountAggregateOutputType = {
    id: number
    user1Id: number
    user2Id: number
    inviteCode: number
    connectedAt: number
    createdAt: number
    _all: number
  }


  export type RelationshipMinAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    inviteCode?: true
    connectedAt?: true
    createdAt?: true
  }

  export type RelationshipMaxAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    inviteCode?: true
    connectedAt?: true
    createdAt?: true
  }

  export type RelationshipCountAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    inviteCode?: true
    connectedAt?: true
    createdAt?: true
    _all?: true
  }

  export type RelationshipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relationship to aggregate.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Relationships
    **/
    _count?: true | RelationshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationshipMaxAggregateInputType
  }

  export type GetRelationshipAggregateType<T extends RelationshipAggregateArgs> = {
        [P in keyof T & keyof AggregateRelationship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelationship[P]>
      : GetScalarType<T[P], AggregateRelationship[P]>
  }




  export type RelationshipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelationshipWhereInput
    orderBy?: RelationshipOrderByWithAggregationInput | RelationshipOrderByWithAggregationInput[]
    by: RelationshipScalarFieldEnum[] | RelationshipScalarFieldEnum
    having?: RelationshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationshipCountAggregateInputType | true
    _min?: RelationshipMinAggregateInputType
    _max?: RelationshipMaxAggregateInputType
  }

  export type RelationshipGroupByOutputType = {
    id: string
    user1Id: string
    user2Id: string | null
    inviteCode: string
    connectedAt: Date | null
    createdAt: Date
    _count: RelationshipCountAggregateOutputType | null
    _min: RelationshipMinAggregateOutputType | null
    _max: RelationshipMaxAggregateOutputType | null
  }

  type GetRelationshipGroupByPayload<T extends RelationshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelationshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationshipGroupByOutputType[P]>
            : GetScalarType<T[P], RelationshipGroupByOutputType[P]>
        }
      >
    >


  export type RelationshipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    inviteCode?: boolean
    connectedAt?: boolean
    createdAt?: boolean
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
    letters?: boolean | Relationship$lettersArgs<ExtArgs>
    books?: boolean | Relationship$booksArgs<ExtArgs>
    reflections?: boolean | Relationship$reflectionsArgs<ExtArgs>
    analytics?: boolean | Relationship$analyticsArgs<ExtArgs>
    insights?: boolean | Relationship$insightsArgs<ExtArgs>
    anniversaries?: boolean | Relationship$anniversariesArgs<ExtArgs>
    _count?: boolean | RelationshipCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relationship"]>

  export type RelationshipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    inviteCode?: boolean
    connectedAt?: boolean
    createdAt?: boolean
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
  }, ExtArgs["result"]["relationship"]>

  export type RelationshipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    inviteCode?: boolean
    connectedAt?: boolean
    createdAt?: boolean
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
  }, ExtArgs["result"]["relationship"]>

  export type RelationshipSelectScalar = {
    id?: boolean
    user1Id?: boolean
    user2Id?: boolean
    inviteCode?: boolean
    connectedAt?: boolean
    createdAt?: boolean
  }

  export type RelationshipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user1Id" | "user2Id" | "inviteCode" | "connectedAt" | "createdAt", ExtArgs["result"]["relationship"]>
  export type RelationshipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
    letters?: boolean | Relationship$lettersArgs<ExtArgs>
    books?: boolean | Relationship$booksArgs<ExtArgs>
    reflections?: boolean | Relationship$reflectionsArgs<ExtArgs>
    analytics?: boolean | Relationship$analyticsArgs<ExtArgs>
    insights?: boolean | Relationship$insightsArgs<ExtArgs>
    anniversaries?: boolean | Relationship$anniversariesArgs<ExtArgs>
    _count?: boolean | RelationshipCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RelationshipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
  }
  export type RelationshipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user1?: boolean | UserDefaultArgs<ExtArgs>
    user2?: boolean | Relationship$user2Args<ExtArgs>
  }

  export type $RelationshipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Relationship"
    objects: {
      user1: Prisma.$UserPayload<ExtArgs>
      user2: Prisma.$UserPayload<ExtArgs> | null
      letters: Prisma.$LetterPayload<ExtArgs>[]
      books: Prisma.$BookPayload<ExtArgs>[]
      reflections: Prisma.$ReflectionPayload<ExtArgs>[]
      analytics: Prisma.$EmotionAnalyticsPayload<ExtArgs>[]
      insights: Prisma.$InsightPayload<ExtArgs>[]
      anniversaries: Prisma.$AnniversaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user1Id: string
      user2Id: string | null
      inviteCode: string
      connectedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["relationship"]>
    composites: {}
  }

  type RelationshipGetPayload<S extends boolean | null | undefined | RelationshipDefaultArgs> = $Result.GetResult<Prisma.$RelationshipPayload, S>

  type RelationshipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelationshipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelationshipCountAggregateInputType | true
    }

  export interface RelationshipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Relationship'], meta: { name: 'Relationship' } }
    /**
     * Find zero or one Relationship that matches the filter.
     * @param {RelationshipFindUniqueArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelationshipFindUniqueArgs>(args: SelectSubset<T, RelationshipFindUniqueArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Relationship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelationshipFindUniqueOrThrowArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelationshipFindUniqueOrThrowArgs>(args: SelectSubset<T, RelationshipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Relationship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindFirstArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelationshipFindFirstArgs>(args?: SelectSubset<T, RelationshipFindFirstArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Relationship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindFirstOrThrowArgs} args - Arguments to find a Relationship
     * @example
     * // Get one Relationship
     * const relationship = await prisma.relationship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelationshipFindFirstOrThrowArgs>(args?: SelectSubset<T, RelationshipFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Relationships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relationships
     * const relationships = await prisma.relationship.findMany()
     * 
     * // Get first 10 Relationships
     * const relationships = await prisma.relationship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relationshipWithIdOnly = await prisma.relationship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelationshipFindManyArgs>(args?: SelectSubset<T, RelationshipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Relationship.
     * @param {RelationshipCreateArgs} args - Arguments to create a Relationship.
     * @example
     * // Create one Relationship
     * const Relationship = await prisma.relationship.create({
     *   data: {
     *     // ... data to create a Relationship
     *   }
     * })
     * 
     */
    create<T extends RelationshipCreateArgs>(args: SelectSubset<T, RelationshipCreateArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Relationships.
     * @param {RelationshipCreateManyArgs} args - Arguments to create many Relationships.
     * @example
     * // Create many Relationships
     * const relationship = await prisma.relationship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelationshipCreateManyArgs>(args?: SelectSubset<T, RelationshipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Relationships and returns the data saved in the database.
     * @param {RelationshipCreateManyAndReturnArgs} args - Arguments to create many Relationships.
     * @example
     * // Create many Relationships
     * const relationship = await prisma.relationship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Relationships and only return the `id`
     * const relationshipWithIdOnly = await prisma.relationship.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelationshipCreateManyAndReturnArgs>(args?: SelectSubset<T, RelationshipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Relationship.
     * @param {RelationshipDeleteArgs} args - Arguments to delete one Relationship.
     * @example
     * // Delete one Relationship
     * const Relationship = await prisma.relationship.delete({
     *   where: {
     *     // ... filter to delete one Relationship
     *   }
     * })
     * 
     */
    delete<T extends RelationshipDeleteArgs>(args: SelectSubset<T, RelationshipDeleteArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Relationship.
     * @param {RelationshipUpdateArgs} args - Arguments to update one Relationship.
     * @example
     * // Update one Relationship
     * const relationship = await prisma.relationship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelationshipUpdateArgs>(args: SelectSubset<T, RelationshipUpdateArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Relationships.
     * @param {RelationshipDeleteManyArgs} args - Arguments to filter Relationships to delete.
     * @example
     * // Delete a few Relationships
     * const { count } = await prisma.relationship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelationshipDeleteManyArgs>(args?: SelectSubset<T, RelationshipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relationships
     * const relationship = await prisma.relationship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelationshipUpdateManyArgs>(args: SelectSubset<T, RelationshipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relationships and returns the data updated in the database.
     * @param {RelationshipUpdateManyAndReturnArgs} args - Arguments to update many Relationships.
     * @example
     * // Update many Relationships
     * const relationship = await prisma.relationship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Relationships and only return the `id`
     * const relationshipWithIdOnly = await prisma.relationship.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RelationshipUpdateManyAndReturnArgs>(args: SelectSubset<T, RelationshipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Relationship.
     * @param {RelationshipUpsertArgs} args - Arguments to update or create a Relationship.
     * @example
     * // Update or create a Relationship
     * const relationship = await prisma.relationship.upsert({
     *   create: {
     *     // ... data to create a Relationship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relationship we want to update
     *   }
     * })
     */
    upsert<T extends RelationshipUpsertArgs>(args: SelectSubset<T, RelationshipUpsertArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Relationships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipCountArgs} args - Arguments to filter Relationships to count.
     * @example
     * // Count the number of Relationships
     * const count = await prisma.relationship.count({
     *   where: {
     *     // ... the filter for the Relationships we want to count
     *   }
     * })
    **/
    count<T extends RelationshipCountArgs>(
      args?: Subset<T, RelationshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationshipAggregateArgs>(args: Subset<T, RelationshipAggregateArgs>): Prisma.PrismaPromise<GetRelationshipAggregateType<T>>

    /**
     * Group by Relationship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationshipGroupByArgs['orderBy'] }
        : { orderBy?: RelationshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Relationship model
   */
  readonly fields: RelationshipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Relationship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelationshipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user1<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user2<T extends Relationship$user2Args<ExtArgs> = {}>(args?: Subset<T, Relationship$user2Args<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    letters<T extends Relationship$lettersArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$lettersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    books<T extends Relationship$booksArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$booksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reflections<T extends Relationship$reflectionsArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$reflectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    analytics<T extends Relationship$analyticsArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$analyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    insights<T extends Relationship$insightsArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$insightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    anniversaries<T extends Relationship$anniversariesArgs<ExtArgs> = {}>(args?: Subset<T, Relationship$anniversariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Relationship model
   */
  interface RelationshipFieldRefs {
    readonly id: FieldRef<"Relationship", 'String'>
    readonly user1Id: FieldRef<"Relationship", 'String'>
    readonly user2Id: FieldRef<"Relationship", 'String'>
    readonly inviteCode: FieldRef<"Relationship", 'String'>
    readonly connectedAt: FieldRef<"Relationship", 'DateTime'>
    readonly createdAt: FieldRef<"Relationship", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Relationship findUnique
   */
  export type RelationshipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship findUniqueOrThrow
   */
  export type RelationshipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship findFirst
   */
  export type RelationshipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relationships.
     */
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship findFirstOrThrow
   */
  export type RelationshipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationship to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relationships.
     */
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship findMany
   */
  export type RelationshipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter, which Relationships to fetch.
     */
    where?: RelationshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relationships to fetch.
     */
    orderBy?: RelationshipOrderByWithRelationInput | RelationshipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Relationships.
     */
    cursor?: RelationshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relationships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relationships.
     */
    skip?: number
    distinct?: RelationshipScalarFieldEnum | RelationshipScalarFieldEnum[]
  }

  /**
   * Relationship create
   */
  export type RelationshipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The data needed to create a Relationship.
     */
    data: XOR<RelationshipCreateInput, RelationshipUncheckedCreateInput>
  }

  /**
   * Relationship createMany
   */
  export type RelationshipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Relationships.
     */
    data: RelationshipCreateManyInput | RelationshipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Relationship createManyAndReturn
   */
  export type RelationshipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * The data used to create many Relationships.
     */
    data: RelationshipCreateManyInput | RelationshipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Relationship update
   */
  export type RelationshipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The data needed to update a Relationship.
     */
    data: XOR<RelationshipUpdateInput, RelationshipUncheckedUpdateInput>
    /**
     * Choose, which Relationship to update.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship updateMany
   */
  export type RelationshipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Relationships.
     */
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyInput>
    /**
     * Filter which Relationships to update
     */
    where?: RelationshipWhereInput
    /**
     * Limit how many Relationships to update.
     */
    limit?: number
  }

  /**
   * Relationship updateManyAndReturn
   */
  export type RelationshipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * The data used to update Relationships.
     */
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyInput>
    /**
     * Filter which Relationships to update
     */
    where?: RelationshipWhereInput
    /**
     * Limit how many Relationships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Relationship upsert
   */
  export type RelationshipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * The filter to search for the Relationship to update in case it exists.
     */
    where: RelationshipWhereUniqueInput
    /**
     * In case the Relationship found by the `where` argument doesn't exist, create a new Relationship with this data.
     */
    create: XOR<RelationshipCreateInput, RelationshipUncheckedCreateInput>
    /**
     * In case the Relationship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelationshipUpdateInput, RelationshipUncheckedUpdateInput>
  }

  /**
   * Relationship delete
   */
  export type RelationshipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
    /**
     * Filter which Relationship to delete.
     */
    where: RelationshipWhereUniqueInput
  }

  /**
   * Relationship deleteMany
   */
  export type RelationshipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relationships to delete
     */
    where?: RelationshipWhereInput
    /**
     * Limit how many Relationships to delete.
     */
    limit?: number
  }

  /**
   * Relationship.user2
   */
  export type Relationship$user2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Relationship.letters
   */
  export type Relationship$lettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    where?: LetterWhereInput
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    cursor?: LetterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LetterScalarFieldEnum | LetterScalarFieldEnum[]
  }

  /**
   * Relationship.books
   */
  export type Relationship$booksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Relationship.reflections
   */
  export type Relationship$reflectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    where?: ReflectionWhereInput
    orderBy?: ReflectionOrderByWithRelationInput | ReflectionOrderByWithRelationInput[]
    cursor?: ReflectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReflectionScalarFieldEnum | ReflectionScalarFieldEnum[]
  }

  /**
   * Relationship.analytics
   */
  export type Relationship$analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    where?: EmotionAnalyticsWhereInput
    orderBy?: EmotionAnalyticsOrderByWithRelationInput | EmotionAnalyticsOrderByWithRelationInput[]
    cursor?: EmotionAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmotionAnalyticsScalarFieldEnum | EmotionAnalyticsScalarFieldEnum[]
  }

  /**
   * Relationship.insights
   */
  export type Relationship$insightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    cursor?: InsightWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Relationship.anniversaries
   */
  export type Relationship$anniversariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    where?: AnniversaryWhereInput
    orderBy?: AnniversaryOrderByWithRelationInput | AnniversaryOrderByWithRelationInput[]
    cursor?: AnniversaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnniversaryScalarFieldEnum | AnniversaryScalarFieldEnum[]
  }

  /**
   * Relationship without action
   */
  export type RelationshipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relationship
     */
    select?: RelationshipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Relationship
     */
    omit?: RelationshipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelationshipInclude<ExtArgs> | null
  }


  /**
   * Model Anniversary
   */

  export type AggregateAnniversary = {
    _count: AnniversaryCountAggregateOutputType | null
    _min: AnniversaryMinAggregateOutputType | null
    _max: AnniversaryMaxAggregateOutputType | null
  }

  export type AnniversaryMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    title: string | null
    date: Date | null
    type: string | null
    createdAt: Date | null
  }

  export type AnniversaryMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    title: string | null
    date: Date | null
    type: string | null
    createdAt: Date | null
  }

  export type AnniversaryCountAggregateOutputType = {
    id: number
    relationshipId: number
    title: number
    date: number
    type: number
    createdAt: number
    _all: number
  }


  export type AnniversaryMinAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    date?: true
    type?: true
    createdAt?: true
  }

  export type AnniversaryMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    date?: true
    type?: true
    createdAt?: true
  }

  export type AnniversaryCountAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    date?: true
    type?: true
    createdAt?: true
    _all?: true
  }

  export type AnniversaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anniversary to aggregate.
     */
    where?: AnniversaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anniversaries to fetch.
     */
    orderBy?: AnniversaryOrderByWithRelationInput | AnniversaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnniversaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anniversaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anniversaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anniversaries
    **/
    _count?: true | AnniversaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnniversaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnniversaryMaxAggregateInputType
  }

  export type GetAnniversaryAggregateType<T extends AnniversaryAggregateArgs> = {
        [P in keyof T & keyof AggregateAnniversary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnniversary[P]>
      : GetScalarType<T[P], AggregateAnniversary[P]>
  }




  export type AnniversaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnniversaryWhereInput
    orderBy?: AnniversaryOrderByWithAggregationInput | AnniversaryOrderByWithAggregationInput[]
    by: AnniversaryScalarFieldEnum[] | AnniversaryScalarFieldEnum
    having?: AnniversaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnniversaryCountAggregateInputType | true
    _min?: AnniversaryMinAggregateInputType
    _max?: AnniversaryMaxAggregateInputType
  }

  export type AnniversaryGroupByOutputType = {
    id: string
    relationshipId: string
    title: string
    date: Date
    type: string
    createdAt: Date
    _count: AnniversaryCountAggregateOutputType | null
    _min: AnniversaryMinAggregateOutputType | null
    _max: AnniversaryMaxAggregateOutputType | null
  }

  type GetAnniversaryGroupByPayload<T extends AnniversaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnniversaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnniversaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnniversaryGroupByOutputType[P]>
            : GetScalarType<T[P], AnniversaryGroupByOutputType[P]>
        }
      >
    >


  export type AnniversarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anniversary"]>

  export type AnniversarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anniversary"]>

  export type AnniversarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["anniversary"]>

  export type AnniversarySelectScalar = {
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    date?: boolean
    type?: boolean
    createdAt?: boolean
  }

  export type AnniversaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "title" | "date" | "type" | "createdAt", ExtArgs["result"]["anniversary"]>
  export type AnniversaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type AnniversaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type AnniversaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }

  export type $AnniversaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Anniversary"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      title: string
      date: Date
      type: string
      createdAt: Date
    }, ExtArgs["result"]["anniversary"]>
    composites: {}
  }

  type AnniversaryGetPayload<S extends boolean | null | undefined | AnniversaryDefaultArgs> = $Result.GetResult<Prisma.$AnniversaryPayload, S>

  type AnniversaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnniversaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnniversaryCountAggregateInputType | true
    }

  export interface AnniversaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Anniversary'], meta: { name: 'Anniversary' } }
    /**
     * Find zero or one Anniversary that matches the filter.
     * @param {AnniversaryFindUniqueArgs} args - Arguments to find a Anniversary
     * @example
     * // Get one Anniversary
     * const anniversary = await prisma.anniversary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnniversaryFindUniqueArgs>(args: SelectSubset<T, AnniversaryFindUniqueArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Anniversary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnniversaryFindUniqueOrThrowArgs} args - Arguments to find a Anniversary
     * @example
     * // Get one Anniversary
     * const anniversary = await prisma.anniversary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnniversaryFindUniqueOrThrowArgs>(args: SelectSubset<T, AnniversaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anniversary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryFindFirstArgs} args - Arguments to find a Anniversary
     * @example
     * // Get one Anniversary
     * const anniversary = await prisma.anniversary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnniversaryFindFirstArgs>(args?: SelectSubset<T, AnniversaryFindFirstArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Anniversary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryFindFirstOrThrowArgs} args - Arguments to find a Anniversary
     * @example
     * // Get one Anniversary
     * const anniversary = await prisma.anniversary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnniversaryFindFirstOrThrowArgs>(args?: SelectSubset<T, AnniversaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Anniversaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anniversaries
     * const anniversaries = await prisma.anniversary.findMany()
     * 
     * // Get first 10 Anniversaries
     * const anniversaries = await prisma.anniversary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anniversaryWithIdOnly = await prisma.anniversary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnniversaryFindManyArgs>(args?: SelectSubset<T, AnniversaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Anniversary.
     * @param {AnniversaryCreateArgs} args - Arguments to create a Anniversary.
     * @example
     * // Create one Anniversary
     * const Anniversary = await prisma.anniversary.create({
     *   data: {
     *     // ... data to create a Anniversary
     *   }
     * })
     * 
     */
    create<T extends AnniversaryCreateArgs>(args: SelectSubset<T, AnniversaryCreateArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Anniversaries.
     * @param {AnniversaryCreateManyArgs} args - Arguments to create many Anniversaries.
     * @example
     * // Create many Anniversaries
     * const anniversary = await prisma.anniversary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnniversaryCreateManyArgs>(args?: SelectSubset<T, AnniversaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Anniversaries and returns the data saved in the database.
     * @param {AnniversaryCreateManyAndReturnArgs} args - Arguments to create many Anniversaries.
     * @example
     * // Create many Anniversaries
     * const anniversary = await prisma.anniversary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Anniversaries and only return the `id`
     * const anniversaryWithIdOnly = await prisma.anniversary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnniversaryCreateManyAndReturnArgs>(args?: SelectSubset<T, AnniversaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Anniversary.
     * @param {AnniversaryDeleteArgs} args - Arguments to delete one Anniversary.
     * @example
     * // Delete one Anniversary
     * const Anniversary = await prisma.anniversary.delete({
     *   where: {
     *     // ... filter to delete one Anniversary
     *   }
     * })
     * 
     */
    delete<T extends AnniversaryDeleteArgs>(args: SelectSubset<T, AnniversaryDeleteArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Anniversary.
     * @param {AnniversaryUpdateArgs} args - Arguments to update one Anniversary.
     * @example
     * // Update one Anniversary
     * const anniversary = await prisma.anniversary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnniversaryUpdateArgs>(args: SelectSubset<T, AnniversaryUpdateArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Anniversaries.
     * @param {AnniversaryDeleteManyArgs} args - Arguments to filter Anniversaries to delete.
     * @example
     * // Delete a few Anniversaries
     * const { count } = await prisma.anniversary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnniversaryDeleteManyArgs>(args?: SelectSubset<T, AnniversaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anniversaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anniversaries
     * const anniversary = await prisma.anniversary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnniversaryUpdateManyArgs>(args: SelectSubset<T, AnniversaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anniversaries and returns the data updated in the database.
     * @param {AnniversaryUpdateManyAndReturnArgs} args - Arguments to update many Anniversaries.
     * @example
     * // Update many Anniversaries
     * const anniversary = await prisma.anniversary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Anniversaries and only return the `id`
     * const anniversaryWithIdOnly = await prisma.anniversary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnniversaryUpdateManyAndReturnArgs>(args: SelectSubset<T, AnniversaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Anniversary.
     * @param {AnniversaryUpsertArgs} args - Arguments to update or create a Anniversary.
     * @example
     * // Update or create a Anniversary
     * const anniversary = await prisma.anniversary.upsert({
     *   create: {
     *     // ... data to create a Anniversary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anniversary we want to update
     *   }
     * })
     */
    upsert<T extends AnniversaryUpsertArgs>(args: SelectSubset<T, AnniversaryUpsertArgs<ExtArgs>>): Prisma__AnniversaryClient<$Result.GetResult<Prisma.$AnniversaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Anniversaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryCountArgs} args - Arguments to filter Anniversaries to count.
     * @example
     * // Count the number of Anniversaries
     * const count = await prisma.anniversary.count({
     *   where: {
     *     // ... the filter for the Anniversaries we want to count
     *   }
     * })
    **/
    count<T extends AnniversaryCountArgs>(
      args?: Subset<T, AnniversaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnniversaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anniversary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnniversaryAggregateArgs>(args: Subset<T, AnniversaryAggregateArgs>): Prisma.PrismaPromise<GetAnniversaryAggregateType<T>>

    /**
     * Group by Anniversary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnniversaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnniversaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnniversaryGroupByArgs['orderBy'] }
        : { orderBy?: AnniversaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnniversaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnniversaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Anniversary model
   */
  readonly fields: AnniversaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Anniversary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnniversaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Anniversary model
   */
  interface AnniversaryFieldRefs {
    readonly id: FieldRef<"Anniversary", 'String'>
    readonly relationshipId: FieldRef<"Anniversary", 'String'>
    readonly title: FieldRef<"Anniversary", 'String'>
    readonly date: FieldRef<"Anniversary", 'DateTime'>
    readonly type: FieldRef<"Anniversary", 'String'>
    readonly createdAt: FieldRef<"Anniversary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Anniversary findUnique
   */
  export type AnniversaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter, which Anniversary to fetch.
     */
    where: AnniversaryWhereUniqueInput
  }

  /**
   * Anniversary findUniqueOrThrow
   */
  export type AnniversaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter, which Anniversary to fetch.
     */
    where: AnniversaryWhereUniqueInput
  }

  /**
   * Anniversary findFirst
   */
  export type AnniversaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter, which Anniversary to fetch.
     */
    where?: AnniversaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anniversaries to fetch.
     */
    orderBy?: AnniversaryOrderByWithRelationInput | AnniversaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anniversaries.
     */
    cursor?: AnniversaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anniversaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anniversaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anniversaries.
     */
    distinct?: AnniversaryScalarFieldEnum | AnniversaryScalarFieldEnum[]
  }

  /**
   * Anniversary findFirstOrThrow
   */
  export type AnniversaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter, which Anniversary to fetch.
     */
    where?: AnniversaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anniversaries to fetch.
     */
    orderBy?: AnniversaryOrderByWithRelationInput | AnniversaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anniversaries.
     */
    cursor?: AnniversaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anniversaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anniversaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anniversaries.
     */
    distinct?: AnniversaryScalarFieldEnum | AnniversaryScalarFieldEnum[]
  }

  /**
   * Anniversary findMany
   */
  export type AnniversaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter, which Anniversaries to fetch.
     */
    where?: AnniversaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anniversaries to fetch.
     */
    orderBy?: AnniversaryOrderByWithRelationInput | AnniversaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anniversaries.
     */
    cursor?: AnniversaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anniversaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anniversaries.
     */
    skip?: number
    distinct?: AnniversaryScalarFieldEnum | AnniversaryScalarFieldEnum[]
  }

  /**
   * Anniversary create
   */
  export type AnniversaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * The data needed to create a Anniversary.
     */
    data: XOR<AnniversaryCreateInput, AnniversaryUncheckedCreateInput>
  }

  /**
   * Anniversary createMany
   */
  export type AnniversaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Anniversaries.
     */
    data: AnniversaryCreateManyInput | AnniversaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Anniversary createManyAndReturn
   */
  export type AnniversaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * The data used to create many Anniversaries.
     */
    data: AnniversaryCreateManyInput | AnniversaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anniversary update
   */
  export type AnniversaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * The data needed to update a Anniversary.
     */
    data: XOR<AnniversaryUpdateInput, AnniversaryUncheckedUpdateInput>
    /**
     * Choose, which Anniversary to update.
     */
    where: AnniversaryWhereUniqueInput
  }

  /**
   * Anniversary updateMany
   */
  export type AnniversaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Anniversaries.
     */
    data: XOR<AnniversaryUpdateManyMutationInput, AnniversaryUncheckedUpdateManyInput>
    /**
     * Filter which Anniversaries to update
     */
    where?: AnniversaryWhereInput
    /**
     * Limit how many Anniversaries to update.
     */
    limit?: number
  }

  /**
   * Anniversary updateManyAndReturn
   */
  export type AnniversaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * The data used to update Anniversaries.
     */
    data: XOR<AnniversaryUpdateManyMutationInput, AnniversaryUncheckedUpdateManyInput>
    /**
     * Filter which Anniversaries to update
     */
    where?: AnniversaryWhereInput
    /**
     * Limit how many Anniversaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Anniversary upsert
   */
  export type AnniversaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * The filter to search for the Anniversary to update in case it exists.
     */
    where: AnniversaryWhereUniqueInput
    /**
     * In case the Anniversary found by the `where` argument doesn't exist, create a new Anniversary with this data.
     */
    create: XOR<AnniversaryCreateInput, AnniversaryUncheckedCreateInput>
    /**
     * In case the Anniversary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnniversaryUpdateInput, AnniversaryUncheckedUpdateInput>
  }

  /**
   * Anniversary delete
   */
  export type AnniversaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
    /**
     * Filter which Anniversary to delete.
     */
    where: AnniversaryWhereUniqueInput
  }

  /**
   * Anniversary deleteMany
   */
  export type AnniversaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Anniversaries to delete
     */
    where?: AnniversaryWhereInput
    /**
     * Limit how many Anniversaries to delete.
     */
    limit?: number
  }

  /**
   * Anniversary without action
   */
  export type AnniversaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Anniversary
     */
    select?: AnniversarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Anniversary
     */
    omit?: AnniversaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnniversaryInclude<ExtArgs> | null
  }


  /**
   * Model Letter
   */

  export type AggregateLetter = {
    _count: LetterCountAggregateOutputType | null
    _min: LetterMinAggregateOutputType | null
    _max: LetterMaxAggregateOutputType | null
  }

  export type LetterMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    senderId: string | null
    content: string | null
    imageUrl: string | null
    voiceUrl: string | null
    isSecret: boolean | null
    openAt: Date | null
    createdAt: Date | null
  }

  export type LetterMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    senderId: string | null
    content: string | null
    imageUrl: string | null
    voiceUrl: string | null
    isSecret: boolean | null
    openAt: Date | null
    createdAt: Date | null
  }

  export type LetterCountAggregateOutputType = {
    id: number
    relationshipId: number
    senderId: number
    content: number
    imageUrl: number
    voiceUrl: number
    isSecret: number
    openAt: number
    createdAt: number
    _all: number
  }


  export type LetterMinAggregateInputType = {
    id?: true
    relationshipId?: true
    senderId?: true
    content?: true
    imageUrl?: true
    voiceUrl?: true
    isSecret?: true
    openAt?: true
    createdAt?: true
  }

  export type LetterMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    senderId?: true
    content?: true
    imageUrl?: true
    voiceUrl?: true
    isSecret?: true
    openAt?: true
    createdAt?: true
  }

  export type LetterCountAggregateInputType = {
    id?: true
    relationshipId?: true
    senderId?: true
    content?: true
    imageUrl?: true
    voiceUrl?: true
    isSecret?: true
    openAt?: true
    createdAt?: true
    _all?: true
  }

  export type LetterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Letter to aggregate.
     */
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     */
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Letters
    **/
    _count?: true | LetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LetterMaxAggregateInputType
  }

  export type GetLetterAggregateType<T extends LetterAggregateArgs> = {
        [P in keyof T & keyof AggregateLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLetter[P]>
      : GetScalarType<T[P], AggregateLetter[P]>
  }




  export type LetterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LetterWhereInput
    orderBy?: LetterOrderByWithAggregationInput | LetterOrderByWithAggregationInput[]
    by: LetterScalarFieldEnum[] | LetterScalarFieldEnum
    having?: LetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LetterCountAggregateInputType | true
    _min?: LetterMinAggregateInputType
    _max?: LetterMaxAggregateInputType
  }

  export type LetterGroupByOutputType = {
    id: string
    relationshipId: string
    senderId: string
    content: string
    imageUrl: string | null
    voiceUrl: string | null
    isSecret: boolean
    openAt: Date | null
    createdAt: Date
    _count: LetterCountAggregateOutputType | null
    _min: LetterMinAggregateOutputType | null
    _max: LetterMaxAggregateOutputType | null
  }

  type GetLetterGroupByPayload<T extends LetterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LetterGroupByOutputType[P]>
            : GetScalarType<T[P], LetterGroupByOutputType[P]>
        }
      >
    >


  export type LetterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    senderId?: boolean
    content?: boolean
    imageUrl?: boolean
    voiceUrl?: boolean
    isSecret?: boolean
    openAt?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["letter"]>

  export type LetterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    senderId?: boolean
    content?: boolean
    imageUrl?: boolean
    voiceUrl?: boolean
    isSecret?: boolean
    openAt?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["letter"]>

  export type LetterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    senderId?: boolean
    content?: boolean
    imageUrl?: boolean
    voiceUrl?: boolean
    isSecret?: boolean
    openAt?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["letter"]>

  export type LetterSelectScalar = {
    id?: boolean
    relationshipId?: boolean
    senderId?: boolean
    content?: boolean
    imageUrl?: boolean
    voiceUrl?: boolean
    isSecret?: boolean
    openAt?: boolean
    createdAt?: boolean
  }

  export type LetterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "senderId" | "content" | "imageUrl" | "voiceUrl" | "isSecret" | "openAt" | "createdAt", ExtArgs["result"]["letter"]>
  export type LetterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LetterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LetterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LetterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Letter"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      senderId: string
      content: string
      imageUrl: string | null
      voiceUrl: string | null
      isSecret: boolean
      openAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["letter"]>
    composites: {}
  }

  type LetterGetPayload<S extends boolean | null | undefined | LetterDefaultArgs> = $Result.GetResult<Prisma.$LetterPayload, S>

  type LetterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LetterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LetterCountAggregateInputType | true
    }

  export interface LetterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Letter'], meta: { name: 'Letter' } }
    /**
     * Find zero or one Letter that matches the filter.
     * @param {LetterFindUniqueArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LetterFindUniqueArgs>(args: SelectSubset<T, LetterFindUniqueArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Letter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LetterFindUniqueOrThrowArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LetterFindUniqueOrThrowArgs>(args: SelectSubset<T, LetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Letter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterFindFirstArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LetterFindFirstArgs>(args?: SelectSubset<T, LetterFindFirstArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Letter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterFindFirstOrThrowArgs} args - Arguments to find a Letter
     * @example
     * // Get one Letter
     * const letter = await prisma.letter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LetterFindFirstOrThrowArgs>(args?: SelectSubset<T, LetterFindFirstOrThrowArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Letters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Letters
     * const letters = await prisma.letter.findMany()
     * 
     * // Get first 10 Letters
     * const letters = await prisma.letter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const letterWithIdOnly = await prisma.letter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LetterFindManyArgs>(args?: SelectSubset<T, LetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Letter.
     * @param {LetterCreateArgs} args - Arguments to create a Letter.
     * @example
     * // Create one Letter
     * const Letter = await prisma.letter.create({
     *   data: {
     *     // ... data to create a Letter
     *   }
     * })
     * 
     */
    create<T extends LetterCreateArgs>(args: SelectSubset<T, LetterCreateArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Letters.
     * @param {LetterCreateManyArgs} args - Arguments to create many Letters.
     * @example
     * // Create many Letters
     * const letter = await prisma.letter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LetterCreateManyArgs>(args?: SelectSubset<T, LetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Letters and returns the data saved in the database.
     * @param {LetterCreateManyAndReturnArgs} args - Arguments to create many Letters.
     * @example
     * // Create many Letters
     * const letter = await prisma.letter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Letters and only return the `id`
     * const letterWithIdOnly = await prisma.letter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LetterCreateManyAndReturnArgs>(args?: SelectSubset<T, LetterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Letter.
     * @param {LetterDeleteArgs} args - Arguments to delete one Letter.
     * @example
     * // Delete one Letter
     * const Letter = await prisma.letter.delete({
     *   where: {
     *     // ... filter to delete one Letter
     *   }
     * })
     * 
     */
    delete<T extends LetterDeleteArgs>(args: SelectSubset<T, LetterDeleteArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Letter.
     * @param {LetterUpdateArgs} args - Arguments to update one Letter.
     * @example
     * // Update one Letter
     * const letter = await prisma.letter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LetterUpdateArgs>(args: SelectSubset<T, LetterUpdateArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Letters.
     * @param {LetterDeleteManyArgs} args - Arguments to filter Letters to delete.
     * @example
     * // Delete a few Letters
     * const { count } = await prisma.letter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LetterDeleteManyArgs>(args?: SelectSubset<T, LetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Letters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Letters
     * const letter = await prisma.letter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LetterUpdateManyArgs>(args: SelectSubset<T, LetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Letters and returns the data updated in the database.
     * @param {LetterUpdateManyAndReturnArgs} args - Arguments to update many Letters.
     * @example
     * // Update many Letters
     * const letter = await prisma.letter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Letters and only return the `id`
     * const letterWithIdOnly = await prisma.letter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LetterUpdateManyAndReturnArgs>(args: SelectSubset<T, LetterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Letter.
     * @param {LetterUpsertArgs} args - Arguments to update or create a Letter.
     * @example
     * // Update or create a Letter
     * const letter = await prisma.letter.upsert({
     *   create: {
     *     // ... data to create a Letter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Letter we want to update
     *   }
     * })
     */
    upsert<T extends LetterUpsertArgs>(args: SelectSubset<T, LetterUpsertArgs<ExtArgs>>): Prisma__LetterClient<$Result.GetResult<Prisma.$LetterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Letters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterCountArgs} args - Arguments to filter Letters to count.
     * @example
     * // Count the number of Letters
     * const count = await prisma.letter.count({
     *   where: {
     *     // ... the filter for the Letters we want to count
     *   }
     * })
    **/
    count<T extends LetterCountArgs>(
      args?: Subset<T, LetterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Letter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LetterAggregateArgs>(args: Subset<T, LetterAggregateArgs>): Prisma.PrismaPromise<GetLetterAggregateType<T>>

    /**
     * Group by Letter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LetterGroupByArgs['orderBy'] }
        : { orderBy?: LetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Letter model
   */
  readonly fields: LetterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Letter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LetterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Letter model
   */
  interface LetterFieldRefs {
    readonly id: FieldRef<"Letter", 'String'>
    readonly relationshipId: FieldRef<"Letter", 'String'>
    readonly senderId: FieldRef<"Letter", 'String'>
    readonly content: FieldRef<"Letter", 'String'>
    readonly imageUrl: FieldRef<"Letter", 'String'>
    readonly voiceUrl: FieldRef<"Letter", 'String'>
    readonly isSecret: FieldRef<"Letter", 'Boolean'>
    readonly openAt: FieldRef<"Letter", 'DateTime'>
    readonly createdAt: FieldRef<"Letter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Letter findUnique
   */
  export type LetterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter, which Letter to fetch.
     */
    where: LetterWhereUniqueInput
  }

  /**
   * Letter findUniqueOrThrow
   */
  export type LetterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter, which Letter to fetch.
     */
    where: LetterWhereUniqueInput
  }

  /**
   * Letter findFirst
   */
  export type LetterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter, which Letter to fetch.
     */
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     */
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Letters.
     */
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Letters.
     */
    distinct?: LetterScalarFieldEnum | LetterScalarFieldEnum[]
  }

  /**
   * Letter findFirstOrThrow
   */
  export type LetterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter, which Letter to fetch.
     */
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     */
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Letters.
     */
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Letters.
     */
    distinct?: LetterScalarFieldEnum | LetterScalarFieldEnum[]
  }

  /**
   * Letter findMany
   */
  export type LetterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter, which Letters to fetch.
     */
    where?: LetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letters to fetch.
     */
    orderBy?: LetterOrderByWithRelationInput | LetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Letters.
     */
    cursor?: LetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letters.
     */
    skip?: number
    distinct?: LetterScalarFieldEnum | LetterScalarFieldEnum[]
  }

  /**
   * Letter create
   */
  export type LetterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * The data needed to create a Letter.
     */
    data: XOR<LetterCreateInput, LetterUncheckedCreateInput>
  }

  /**
   * Letter createMany
   */
  export type LetterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Letters.
     */
    data: LetterCreateManyInput | LetterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Letter createManyAndReturn
   */
  export type LetterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * The data used to create many Letters.
     */
    data: LetterCreateManyInput | LetterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Letter update
   */
  export type LetterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * The data needed to update a Letter.
     */
    data: XOR<LetterUpdateInput, LetterUncheckedUpdateInput>
    /**
     * Choose, which Letter to update.
     */
    where: LetterWhereUniqueInput
  }

  /**
   * Letter updateMany
   */
  export type LetterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Letters.
     */
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyInput>
    /**
     * Filter which Letters to update
     */
    where?: LetterWhereInput
    /**
     * Limit how many Letters to update.
     */
    limit?: number
  }

  /**
   * Letter updateManyAndReturn
   */
  export type LetterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * The data used to update Letters.
     */
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyInput>
    /**
     * Filter which Letters to update
     */
    where?: LetterWhereInput
    /**
     * Limit how many Letters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Letter upsert
   */
  export type LetterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * The filter to search for the Letter to update in case it exists.
     */
    where: LetterWhereUniqueInput
    /**
     * In case the Letter found by the `where` argument doesn't exist, create a new Letter with this data.
     */
    create: XOR<LetterCreateInput, LetterUncheckedCreateInput>
    /**
     * In case the Letter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LetterUpdateInput, LetterUncheckedUpdateInput>
  }

  /**
   * Letter delete
   */
  export type LetterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
    /**
     * Filter which Letter to delete.
     */
    where: LetterWhereUniqueInput
  }

  /**
   * Letter deleteMany
   */
  export type LetterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Letters to delete
     */
    where?: LetterWhereInput
    /**
     * Limit how many Letters to delete.
     */
    limit?: number
  }

  /**
   * Letter without action
   */
  export type LetterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letter
     */
    select?: LetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Letter
     */
    omit?: LetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LetterInclude<ExtArgs> | null
  }


  /**
   * Model Book
   */

  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    title: string | null
    pdfUrl: string | null
    status: string | null
    generatedAt: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    title: string | null
    pdfUrl: string | null
    status: string | null
    generatedAt: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    relationshipId: number
    title: number
    pdfUrl: number
    status: number
    generatedAt: number
    _all: number
  }


  export type BookMinAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    pdfUrl?: true
    status?: true
    generatedAt?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    pdfUrl?: true
    status?: true
    generatedAt?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    relationshipId?: true
    title?: true
    pdfUrl?: true
    status?: true
    generatedAt?: true
    _all?: true
  }

  export type BookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Book to aggregate.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
    orderBy?: BookOrderByWithAggregationInput | BookOrderByWithAggregationInput[]
    by: BookScalarFieldEnum[] | BookScalarFieldEnum
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }

  export type BookGroupByOutputType = {
    id: string
    relationshipId: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date
    _count: BookCountAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    pdfUrl?: boolean
    status?: boolean
    generatedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>

  export type BookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    pdfUrl?: boolean
    status?: boolean
    generatedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>

  export type BookSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    pdfUrl?: boolean
    status?: boolean
    generatedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>

  export type BookSelectScalar = {
    id?: boolean
    relationshipId?: boolean
    title?: boolean
    pdfUrl?: boolean
    status?: boolean
    generatedAt?: boolean
  }

  export type BookOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "title" | "pdfUrl" | "status" | "generatedAt", ExtArgs["result"]["book"]>
  export type BookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type BookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type BookIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }

  export type $BookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Book"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      title: string
      pdfUrl: string
      status: string
      generatedAt: Date
    }, ExtArgs["result"]["book"]>
    composites: {}
  }

  type BookGetPayload<S extends boolean | null | undefined | BookDefaultArgs> = $Result.GetResult<Prisma.$BookPayload, S>

  type BookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookCountAggregateInputType | true
    }

  export interface BookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Book'], meta: { name: 'Book' } }
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookFindUniqueArgs>(args: SelectSubset<T, BookFindUniqueArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Book that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(args: SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookFindFirstArgs>(args?: SelectSubset<T, BookFindFirstArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(args?: SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookFindManyArgs>(args?: SelectSubset<T, BookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
     */
    create<T extends BookCreateArgs>(args: SelectSubset<T, BookCreateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Books.
     * @param {BookCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookCreateManyArgs>(args?: SelectSubset<T, BookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Books and returns the data saved in the database.
     * @param {BookCreateManyAndReturnArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Books and only return the `id`
     * const bookWithIdOnly = await prisma.book.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookCreateManyAndReturnArgs>(args?: SelectSubset<T, BookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
     */
    delete<T extends BookDeleteArgs>(args: SelectSubset<T, BookDeleteArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookUpdateArgs>(args: SelectSubset<T, BookUpdateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookDeleteManyArgs>(args?: SelectSubset<T, BookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookUpdateManyArgs>(args: SelectSubset<T, BookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books and returns the data updated in the database.
     * @param {BookUpdateManyAndReturnArgs} args - Arguments to update many Books.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Books and only return the `id`
     * const bookWithIdOnly = await prisma.book.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookUpdateManyAndReturnArgs>(args: SelectSubset<T, BookUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
     */
    upsert<T extends BookUpsertArgs>(args: SelectSubset<T, BookUpsertArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Book model
   */
  interface BookFieldRefs {
    readonly id: FieldRef<"Book", 'String'>
    readonly relationshipId: FieldRef<"Book", 'String'>
    readonly title: FieldRef<"Book", 'String'>
    readonly pdfUrl: FieldRef<"Book", 'String'>
    readonly status: FieldRef<"Book", 'String'>
    readonly generatedAt: FieldRef<"Book", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findFirst
   */
  export type BookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findMany
   */
  export type BookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book create
   */
  export type BookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to create a Book.
     */
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }

  /**
   * Book createMany
   */
  export type BookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Book createManyAndReturn
   */
  export type BookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Book update
   */
  export type BookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to update a Book.
     */
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
  }

  /**
   * Book updateManyAndReturn
   */
  export type BookUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Book upsert
   */
  export type BookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The filter to search for the Book to update in case it exists.
     */
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     */
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }

  /**
   * Book delete
   */
  export type BookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter which Book to delete.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to delete.
     */
    limit?: number
  }

  /**
   * Book without action
   */
  export type BookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
  }


  /**
   * Model Reflection
   */

  export type AggregateReflection = {
    _count: ReflectionCountAggregateOutputType | null
    _min: ReflectionMinAggregateOutputType | null
    _max: ReflectionMaxAggregateOutputType | null
  }

  export type ReflectionMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    type: string | null
    resultText: string | null
    createdAt: Date | null
  }

  export type ReflectionMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    type: string | null
    resultText: string | null
    createdAt: Date | null
  }

  export type ReflectionCountAggregateOutputType = {
    id: number
    relationshipId: number
    type: number
    resultText: number
    createdAt: number
    _all: number
  }


  export type ReflectionMinAggregateInputType = {
    id?: true
    relationshipId?: true
    type?: true
    resultText?: true
    createdAt?: true
  }

  export type ReflectionMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    type?: true
    resultText?: true
    createdAt?: true
  }

  export type ReflectionCountAggregateInputType = {
    id?: true
    relationshipId?: true
    type?: true
    resultText?: true
    createdAt?: true
    _all?: true
  }

  export type ReflectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reflection to aggregate.
     */
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     */
    orderBy?: ReflectionOrderByWithRelationInput | ReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reflections
    **/
    _count?: true | ReflectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReflectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReflectionMaxAggregateInputType
  }

  export type GetReflectionAggregateType<T extends ReflectionAggregateArgs> = {
        [P in keyof T & keyof AggregateReflection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReflection[P]>
      : GetScalarType<T[P], AggregateReflection[P]>
  }




  export type ReflectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReflectionWhereInput
    orderBy?: ReflectionOrderByWithAggregationInput | ReflectionOrderByWithAggregationInput[]
    by: ReflectionScalarFieldEnum[] | ReflectionScalarFieldEnum
    having?: ReflectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReflectionCountAggregateInputType | true
    _min?: ReflectionMinAggregateInputType
    _max?: ReflectionMaxAggregateInputType
  }

  export type ReflectionGroupByOutputType = {
    id: string
    relationshipId: string
    type: string
    resultText: string
    createdAt: Date
    _count: ReflectionCountAggregateOutputType | null
    _min: ReflectionMinAggregateOutputType | null
    _max: ReflectionMaxAggregateOutputType | null
  }

  type GetReflectionGroupByPayload<T extends ReflectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReflectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReflectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReflectionGroupByOutputType[P]>
            : GetScalarType<T[P], ReflectionGroupByOutputType[P]>
        }
      >
    >


  export type ReflectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    type?: boolean
    resultText?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflection"]>

  export type ReflectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    type?: boolean
    resultText?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflection"]>

  export type ReflectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    type?: boolean
    resultText?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reflection"]>

  export type ReflectionSelectScalar = {
    id?: boolean
    relationshipId?: boolean
    type?: boolean
    resultText?: boolean
    createdAt?: boolean
  }

  export type ReflectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "type" | "resultText" | "createdAt", ExtArgs["result"]["reflection"]>
  export type ReflectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type ReflectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type ReflectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }

  export type $ReflectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reflection"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      type: string
      resultText: string
      createdAt: Date
    }, ExtArgs["result"]["reflection"]>
    composites: {}
  }

  type ReflectionGetPayload<S extends boolean | null | undefined | ReflectionDefaultArgs> = $Result.GetResult<Prisma.$ReflectionPayload, S>

  type ReflectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReflectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReflectionCountAggregateInputType | true
    }

  export interface ReflectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reflection'], meta: { name: 'Reflection' } }
    /**
     * Find zero or one Reflection that matches the filter.
     * @param {ReflectionFindUniqueArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReflectionFindUniqueArgs>(args: SelectSubset<T, ReflectionFindUniqueArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reflection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReflectionFindUniqueOrThrowArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReflectionFindUniqueOrThrowArgs>(args: SelectSubset<T, ReflectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reflection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionFindFirstArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReflectionFindFirstArgs>(args?: SelectSubset<T, ReflectionFindFirstArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reflection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionFindFirstOrThrowArgs} args - Arguments to find a Reflection
     * @example
     * // Get one Reflection
     * const reflection = await prisma.reflection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReflectionFindFirstOrThrowArgs>(args?: SelectSubset<T, ReflectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reflections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reflections
     * const reflections = await prisma.reflection.findMany()
     * 
     * // Get first 10 Reflections
     * const reflections = await prisma.reflection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reflectionWithIdOnly = await prisma.reflection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReflectionFindManyArgs>(args?: SelectSubset<T, ReflectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reflection.
     * @param {ReflectionCreateArgs} args - Arguments to create a Reflection.
     * @example
     * // Create one Reflection
     * const Reflection = await prisma.reflection.create({
     *   data: {
     *     // ... data to create a Reflection
     *   }
     * })
     * 
     */
    create<T extends ReflectionCreateArgs>(args: SelectSubset<T, ReflectionCreateArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reflections.
     * @param {ReflectionCreateManyArgs} args - Arguments to create many Reflections.
     * @example
     * // Create many Reflections
     * const reflection = await prisma.reflection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReflectionCreateManyArgs>(args?: SelectSubset<T, ReflectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reflections and returns the data saved in the database.
     * @param {ReflectionCreateManyAndReturnArgs} args - Arguments to create many Reflections.
     * @example
     * // Create many Reflections
     * const reflection = await prisma.reflection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reflections and only return the `id`
     * const reflectionWithIdOnly = await prisma.reflection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReflectionCreateManyAndReturnArgs>(args?: SelectSubset<T, ReflectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reflection.
     * @param {ReflectionDeleteArgs} args - Arguments to delete one Reflection.
     * @example
     * // Delete one Reflection
     * const Reflection = await prisma.reflection.delete({
     *   where: {
     *     // ... filter to delete one Reflection
     *   }
     * })
     * 
     */
    delete<T extends ReflectionDeleteArgs>(args: SelectSubset<T, ReflectionDeleteArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reflection.
     * @param {ReflectionUpdateArgs} args - Arguments to update one Reflection.
     * @example
     * // Update one Reflection
     * const reflection = await prisma.reflection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReflectionUpdateArgs>(args: SelectSubset<T, ReflectionUpdateArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reflections.
     * @param {ReflectionDeleteManyArgs} args - Arguments to filter Reflections to delete.
     * @example
     * // Delete a few Reflections
     * const { count } = await prisma.reflection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReflectionDeleteManyArgs>(args?: SelectSubset<T, ReflectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reflections
     * const reflection = await prisma.reflection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReflectionUpdateManyArgs>(args: SelectSubset<T, ReflectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reflections and returns the data updated in the database.
     * @param {ReflectionUpdateManyAndReturnArgs} args - Arguments to update many Reflections.
     * @example
     * // Update many Reflections
     * const reflection = await prisma.reflection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reflections and only return the `id`
     * const reflectionWithIdOnly = await prisma.reflection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReflectionUpdateManyAndReturnArgs>(args: SelectSubset<T, ReflectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reflection.
     * @param {ReflectionUpsertArgs} args - Arguments to update or create a Reflection.
     * @example
     * // Update or create a Reflection
     * const reflection = await prisma.reflection.upsert({
     *   create: {
     *     // ... data to create a Reflection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reflection we want to update
     *   }
     * })
     */
    upsert<T extends ReflectionUpsertArgs>(args: SelectSubset<T, ReflectionUpsertArgs<ExtArgs>>): Prisma__ReflectionClient<$Result.GetResult<Prisma.$ReflectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reflections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionCountArgs} args - Arguments to filter Reflections to count.
     * @example
     * // Count the number of Reflections
     * const count = await prisma.reflection.count({
     *   where: {
     *     // ... the filter for the Reflections we want to count
     *   }
     * })
    **/
    count<T extends ReflectionCountArgs>(
      args?: Subset<T, ReflectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReflectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReflectionAggregateArgs>(args: Subset<T, ReflectionAggregateArgs>): Prisma.PrismaPromise<GetReflectionAggregateType<T>>

    /**
     * Group by Reflection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReflectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReflectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReflectionGroupByArgs['orderBy'] }
        : { orderBy?: ReflectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReflectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReflectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reflection model
   */
  readonly fields: ReflectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reflection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReflectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reflection model
   */
  interface ReflectionFieldRefs {
    readonly id: FieldRef<"Reflection", 'String'>
    readonly relationshipId: FieldRef<"Reflection", 'String'>
    readonly type: FieldRef<"Reflection", 'String'>
    readonly resultText: FieldRef<"Reflection", 'String'>
    readonly createdAt: FieldRef<"Reflection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reflection findUnique
   */
  export type ReflectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter, which Reflection to fetch.
     */
    where: ReflectionWhereUniqueInput
  }

  /**
   * Reflection findUniqueOrThrow
   */
  export type ReflectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter, which Reflection to fetch.
     */
    where: ReflectionWhereUniqueInput
  }

  /**
   * Reflection findFirst
   */
  export type ReflectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter, which Reflection to fetch.
     */
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     */
    orderBy?: ReflectionOrderByWithRelationInput | ReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reflections.
     */
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reflections.
     */
    distinct?: ReflectionScalarFieldEnum | ReflectionScalarFieldEnum[]
  }

  /**
   * Reflection findFirstOrThrow
   */
  export type ReflectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter, which Reflection to fetch.
     */
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     */
    orderBy?: ReflectionOrderByWithRelationInput | ReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reflections.
     */
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reflections.
     */
    distinct?: ReflectionScalarFieldEnum | ReflectionScalarFieldEnum[]
  }

  /**
   * Reflection findMany
   */
  export type ReflectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter, which Reflections to fetch.
     */
    where?: ReflectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reflections to fetch.
     */
    orderBy?: ReflectionOrderByWithRelationInput | ReflectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reflections.
     */
    cursor?: ReflectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reflections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reflections.
     */
    skip?: number
    distinct?: ReflectionScalarFieldEnum | ReflectionScalarFieldEnum[]
  }

  /**
   * Reflection create
   */
  export type ReflectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Reflection.
     */
    data: XOR<ReflectionCreateInput, ReflectionUncheckedCreateInput>
  }

  /**
   * Reflection createMany
   */
  export type ReflectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reflections.
     */
    data: ReflectionCreateManyInput | ReflectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reflection createManyAndReturn
   */
  export type ReflectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * The data used to create many Reflections.
     */
    data: ReflectionCreateManyInput | ReflectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reflection update
   */
  export type ReflectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Reflection.
     */
    data: XOR<ReflectionUpdateInput, ReflectionUncheckedUpdateInput>
    /**
     * Choose, which Reflection to update.
     */
    where: ReflectionWhereUniqueInput
  }

  /**
   * Reflection updateMany
   */
  export type ReflectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reflections.
     */
    data: XOR<ReflectionUpdateManyMutationInput, ReflectionUncheckedUpdateManyInput>
    /**
     * Filter which Reflections to update
     */
    where?: ReflectionWhereInput
    /**
     * Limit how many Reflections to update.
     */
    limit?: number
  }

  /**
   * Reflection updateManyAndReturn
   */
  export type ReflectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * The data used to update Reflections.
     */
    data: XOR<ReflectionUpdateManyMutationInput, ReflectionUncheckedUpdateManyInput>
    /**
     * Filter which Reflections to update
     */
    where?: ReflectionWhereInput
    /**
     * Limit how many Reflections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reflection upsert
   */
  export type ReflectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Reflection to update in case it exists.
     */
    where: ReflectionWhereUniqueInput
    /**
     * In case the Reflection found by the `where` argument doesn't exist, create a new Reflection with this data.
     */
    create: XOR<ReflectionCreateInput, ReflectionUncheckedCreateInput>
    /**
     * In case the Reflection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReflectionUpdateInput, ReflectionUncheckedUpdateInput>
  }

  /**
   * Reflection delete
   */
  export type ReflectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
    /**
     * Filter which Reflection to delete.
     */
    where: ReflectionWhereUniqueInput
  }

  /**
   * Reflection deleteMany
   */
  export type ReflectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reflections to delete
     */
    where?: ReflectionWhereInput
    /**
     * Limit how many Reflections to delete.
     */
    limit?: number
  }

  /**
   * Reflection without action
   */
  export type ReflectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reflection
     */
    select?: ReflectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reflection
     */
    omit?: ReflectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReflectionInclude<ExtArgs> | null
  }


  /**
   * Model EmotionAnalytics
   */

  export type AggregateEmotionAnalytics = {
    _count: EmotionAnalyticsCountAggregateOutputType | null
    _avg: EmotionAnalyticsAvgAggregateOutputType | null
    _sum: EmotionAnalyticsSumAggregateOutputType | null
    _min: EmotionAnalyticsMinAggregateOutputType | null
    _max: EmotionAnalyticsMaxAggregateOutputType | null
  }

  export type EmotionAnalyticsAvgAggregateOutputType = {
    positive: number | null
    neutral: number | null
    negative: number | null
  }

  export type EmotionAnalyticsSumAggregateOutputType = {
    positive: number | null
    neutral: number | null
    negative: number | null
  }

  export type EmotionAnalyticsMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    positive: number | null
    neutral: number | null
    negative: number | null
    analyzedAt: Date | null
  }

  export type EmotionAnalyticsMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    positive: number | null
    neutral: number | null
    negative: number | null
    analyzedAt: Date | null
  }

  export type EmotionAnalyticsCountAggregateOutputType = {
    id: number
    relationshipId: number
    positive: number
    neutral: number
    negative: number
    analyzedAt: number
    _all: number
  }


  export type EmotionAnalyticsAvgAggregateInputType = {
    positive?: true
    neutral?: true
    negative?: true
  }

  export type EmotionAnalyticsSumAggregateInputType = {
    positive?: true
    neutral?: true
    negative?: true
  }

  export type EmotionAnalyticsMinAggregateInputType = {
    id?: true
    relationshipId?: true
    positive?: true
    neutral?: true
    negative?: true
    analyzedAt?: true
  }

  export type EmotionAnalyticsMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    positive?: true
    neutral?: true
    negative?: true
    analyzedAt?: true
  }

  export type EmotionAnalyticsCountAggregateInputType = {
    id?: true
    relationshipId?: true
    positive?: true
    neutral?: true
    negative?: true
    analyzedAt?: true
    _all?: true
  }

  export type EmotionAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmotionAnalytics to aggregate.
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmotionAnalytics to fetch.
     */
    orderBy?: EmotionAnalyticsOrderByWithRelationInput | EmotionAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmotionAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmotionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmotionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmotionAnalytics
    **/
    _count?: true | EmotionAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmotionAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmotionAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmotionAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmotionAnalyticsMaxAggregateInputType
  }

  export type GetEmotionAnalyticsAggregateType<T extends EmotionAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateEmotionAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmotionAnalytics[P]>
      : GetScalarType<T[P], AggregateEmotionAnalytics[P]>
  }




  export type EmotionAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmotionAnalyticsWhereInput
    orderBy?: EmotionAnalyticsOrderByWithAggregationInput | EmotionAnalyticsOrderByWithAggregationInput[]
    by: EmotionAnalyticsScalarFieldEnum[] | EmotionAnalyticsScalarFieldEnum
    having?: EmotionAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmotionAnalyticsCountAggregateInputType | true
    _avg?: EmotionAnalyticsAvgAggregateInputType
    _sum?: EmotionAnalyticsSumAggregateInputType
    _min?: EmotionAnalyticsMinAggregateInputType
    _max?: EmotionAnalyticsMaxAggregateInputType
  }

  export type EmotionAnalyticsGroupByOutputType = {
    id: string
    relationshipId: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date
    _count: EmotionAnalyticsCountAggregateOutputType | null
    _avg: EmotionAnalyticsAvgAggregateOutputType | null
    _sum: EmotionAnalyticsSumAggregateOutputType | null
    _min: EmotionAnalyticsMinAggregateOutputType | null
    _max: EmotionAnalyticsMaxAggregateOutputType | null
  }

  type GetEmotionAnalyticsGroupByPayload<T extends EmotionAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmotionAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmotionAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmotionAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], EmotionAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type EmotionAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    positive?: boolean
    neutral?: boolean
    negative?: boolean
    analyzedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emotionAnalytics"]>

  export type EmotionAnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    positive?: boolean
    neutral?: boolean
    negative?: boolean
    analyzedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emotionAnalytics"]>

  export type EmotionAnalyticsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    positive?: boolean
    neutral?: boolean
    negative?: boolean
    analyzedAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emotionAnalytics"]>

  export type EmotionAnalyticsSelectScalar = {
    id?: boolean
    relationshipId?: boolean
    positive?: boolean
    neutral?: boolean
    negative?: boolean
    analyzedAt?: boolean
  }

  export type EmotionAnalyticsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "positive" | "neutral" | "negative" | "analyzedAt", ExtArgs["result"]["emotionAnalytics"]>
  export type EmotionAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type EmotionAnalyticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type EmotionAnalyticsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }

  export type $EmotionAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmotionAnalytics"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      positive: number
      neutral: number
      negative: number
      analyzedAt: Date
    }, ExtArgs["result"]["emotionAnalytics"]>
    composites: {}
  }

  type EmotionAnalyticsGetPayload<S extends boolean | null | undefined | EmotionAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$EmotionAnalyticsPayload, S>

  type EmotionAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmotionAnalyticsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmotionAnalyticsCountAggregateInputType | true
    }

  export interface EmotionAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmotionAnalytics'], meta: { name: 'EmotionAnalytics' } }
    /**
     * Find zero or one EmotionAnalytics that matches the filter.
     * @param {EmotionAnalyticsFindUniqueArgs} args - Arguments to find a EmotionAnalytics
     * @example
     * // Get one EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmotionAnalyticsFindUniqueArgs>(args: SelectSubset<T, EmotionAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmotionAnalytics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmotionAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a EmotionAnalytics
     * @example
     * // Get one EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmotionAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, EmotionAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmotionAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsFindFirstArgs} args - Arguments to find a EmotionAnalytics
     * @example
     * // Get one EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmotionAnalyticsFindFirstArgs>(args?: SelectSubset<T, EmotionAnalyticsFindFirstArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmotionAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsFindFirstOrThrowArgs} args - Arguments to find a EmotionAnalytics
     * @example
     * // Get one EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmotionAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, EmotionAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmotionAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findMany()
     * 
     * // Get first 10 EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emotionAnalyticsWithIdOnly = await prisma.emotionAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmotionAnalyticsFindManyArgs>(args?: SelectSubset<T, EmotionAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmotionAnalytics.
     * @param {EmotionAnalyticsCreateArgs} args - Arguments to create a EmotionAnalytics.
     * @example
     * // Create one EmotionAnalytics
     * const EmotionAnalytics = await prisma.emotionAnalytics.create({
     *   data: {
     *     // ... data to create a EmotionAnalytics
     *   }
     * })
     * 
     */
    create<T extends EmotionAnalyticsCreateArgs>(args: SelectSubset<T, EmotionAnalyticsCreateArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmotionAnalytics.
     * @param {EmotionAnalyticsCreateManyArgs} args - Arguments to create many EmotionAnalytics.
     * @example
     * // Create many EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmotionAnalyticsCreateManyArgs>(args?: SelectSubset<T, EmotionAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmotionAnalytics and returns the data saved in the database.
     * @param {EmotionAnalyticsCreateManyAndReturnArgs} args - Arguments to create many EmotionAnalytics.
     * @example
     * // Create many EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmotionAnalytics and only return the `id`
     * const emotionAnalyticsWithIdOnly = await prisma.emotionAnalytics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmotionAnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, EmotionAnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmotionAnalytics.
     * @param {EmotionAnalyticsDeleteArgs} args - Arguments to delete one EmotionAnalytics.
     * @example
     * // Delete one EmotionAnalytics
     * const EmotionAnalytics = await prisma.emotionAnalytics.delete({
     *   where: {
     *     // ... filter to delete one EmotionAnalytics
     *   }
     * })
     * 
     */
    delete<T extends EmotionAnalyticsDeleteArgs>(args: SelectSubset<T, EmotionAnalyticsDeleteArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmotionAnalytics.
     * @param {EmotionAnalyticsUpdateArgs} args - Arguments to update one EmotionAnalytics.
     * @example
     * // Update one EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmotionAnalyticsUpdateArgs>(args: SelectSubset<T, EmotionAnalyticsUpdateArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmotionAnalytics.
     * @param {EmotionAnalyticsDeleteManyArgs} args - Arguments to filter EmotionAnalytics to delete.
     * @example
     * // Delete a few EmotionAnalytics
     * const { count } = await prisma.emotionAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmotionAnalyticsDeleteManyArgs>(args?: SelectSubset<T, EmotionAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmotionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmotionAnalyticsUpdateManyArgs>(args: SelectSubset<T, EmotionAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmotionAnalytics and returns the data updated in the database.
     * @param {EmotionAnalyticsUpdateManyAndReturnArgs} args - Arguments to update many EmotionAnalytics.
     * @example
     * // Update many EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmotionAnalytics and only return the `id`
     * const emotionAnalyticsWithIdOnly = await prisma.emotionAnalytics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmotionAnalyticsUpdateManyAndReturnArgs>(args: SelectSubset<T, EmotionAnalyticsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmotionAnalytics.
     * @param {EmotionAnalyticsUpsertArgs} args - Arguments to update or create a EmotionAnalytics.
     * @example
     * // Update or create a EmotionAnalytics
     * const emotionAnalytics = await prisma.emotionAnalytics.upsert({
     *   create: {
     *     // ... data to create a EmotionAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmotionAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends EmotionAnalyticsUpsertArgs>(args: SelectSubset<T, EmotionAnalyticsUpsertArgs<ExtArgs>>): Prisma__EmotionAnalyticsClient<$Result.GetResult<Prisma.$EmotionAnalyticsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmotionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsCountArgs} args - Arguments to filter EmotionAnalytics to count.
     * @example
     * // Count the number of EmotionAnalytics
     * const count = await prisma.emotionAnalytics.count({
     *   where: {
     *     // ... the filter for the EmotionAnalytics we want to count
     *   }
     * })
    **/
    count<T extends EmotionAnalyticsCountArgs>(
      args?: Subset<T, EmotionAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmotionAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmotionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmotionAnalyticsAggregateArgs>(args: Subset<T, EmotionAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetEmotionAnalyticsAggregateType<T>>

    /**
     * Group by EmotionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmotionAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmotionAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmotionAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: EmotionAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmotionAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmotionAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmotionAnalytics model
   */
  readonly fields: EmotionAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmotionAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmotionAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmotionAnalytics model
   */
  interface EmotionAnalyticsFieldRefs {
    readonly id: FieldRef<"EmotionAnalytics", 'String'>
    readonly relationshipId: FieldRef<"EmotionAnalytics", 'String'>
    readonly positive: FieldRef<"EmotionAnalytics", 'Int'>
    readonly neutral: FieldRef<"EmotionAnalytics", 'Int'>
    readonly negative: FieldRef<"EmotionAnalytics", 'Int'>
    readonly analyzedAt: FieldRef<"EmotionAnalytics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmotionAnalytics findUnique
   */
  export type EmotionAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmotionAnalytics to fetch.
     */
    where: EmotionAnalyticsWhereUniqueInput
  }

  /**
   * EmotionAnalytics findUniqueOrThrow
   */
  export type EmotionAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmotionAnalytics to fetch.
     */
    where: EmotionAnalyticsWhereUniqueInput
  }

  /**
   * EmotionAnalytics findFirst
   */
  export type EmotionAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmotionAnalytics to fetch.
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmotionAnalytics to fetch.
     */
    orderBy?: EmotionAnalyticsOrderByWithRelationInput | EmotionAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmotionAnalytics.
     */
    cursor?: EmotionAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmotionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmotionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmotionAnalytics.
     */
    distinct?: EmotionAnalyticsScalarFieldEnum | EmotionAnalyticsScalarFieldEnum[]
  }

  /**
   * EmotionAnalytics findFirstOrThrow
   */
  export type EmotionAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmotionAnalytics to fetch.
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmotionAnalytics to fetch.
     */
    orderBy?: EmotionAnalyticsOrderByWithRelationInput | EmotionAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmotionAnalytics.
     */
    cursor?: EmotionAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmotionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmotionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmotionAnalytics.
     */
    distinct?: EmotionAnalyticsScalarFieldEnum | EmotionAnalyticsScalarFieldEnum[]
  }

  /**
   * EmotionAnalytics findMany
   */
  export type EmotionAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which EmotionAnalytics to fetch.
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmotionAnalytics to fetch.
     */
    orderBy?: EmotionAnalyticsOrderByWithRelationInput | EmotionAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmotionAnalytics.
     */
    cursor?: EmotionAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmotionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmotionAnalytics.
     */
    skip?: number
    distinct?: EmotionAnalyticsScalarFieldEnum | EmotionAnalyticsScalarFieldEnum[]
  }

  /**
   * EmotionAnalytics create
   */
  export type EmotionAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a EmotionAnalytics.
     */
    data: XOR<EmotionAnalyticsCreateInput, EmotionAnalyticsUncheckedCreateInput>
  }

  /**
   * EmotionAnalytics createMany
   */
  export type EmotionAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmotionAnalytics.
     */
    data: EmotionAnalyticsCreateManyInput | EmotionAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmotionAnalytics createManyAndReturn
   */
  export type EmotionAnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to create many EmotionAnalytics.
     */
    data: EmotionAnalyticsCreateManyInput | EmotionAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmotionAnalytics update
   */
  export type EmotionAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a EmotionAnalytics.
     */
    data: XOR<EmotionAnalyticsUpdateInput, EmotionAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which EmotionAnalytics to update.
     */
    where: EmotionAnalyticsWhereUniqueInput
  }

  /**
   * EmotionAnalytics updateMany
   */
  export type EmotionAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmotionAnalytics.
     */
    data: XOR<EmotionAnalyticsUpdateManyMutationInput, EmotionAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which EmotionAnalytics to update
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * Limit how many EmotionAnalytics to update.
     */
    limit?: number
  }

  /**
   * EmotionAnalytics updateManyAndReturn
   */
  export type EmotionAnalyticsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * The data used to update EmotionAnalytics.
     */
    data: XOR<EmotionAnalyticsUpdateManyMutationInput, EmotionAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which EmotionAnalytics to update
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * Limit how many EmotionAnalytics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmotionAnalytics upsert
   */
  export type EmotionAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the EmotionAnalytics to update in case it exists.
     */
    where: EmotionAnalyticsWhereUniqueInput
    /**
     * In case the EmotionAnalytics found by the `where` argument doesn't exist, create a new EmotionAnalytics with this data.
     */
    create: XOR<EmotionAnalyticsCreateInput, EmotionAnalyticsUncheckedCreateInput>
    /**
     * In case the EmotionAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmotionAnalyticsUpdateInput, EmotionAnalyticsUncheckedUpdateInput>
  }

  /**
   * EmotionAnalytics delete
   */
  export type EmotionAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which EmotionAnalytics to delete.
     */
    where: EmotionAnalyticsWhereUniqueInput
  }

  /**
   * EmotionAnalytics deleteMany
   */
  export type EmotionAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmotionAnalytics to delete
     */
    where?: EmotionAnalyticsWhereInput
    /**
     * Limit how many EmotionAnalytics to delete.
     */
    limit?: number
  }

  /**
   * EmotionAnalytics without action
   */
  export type EmotionAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmotionAnalytics
     */
    select?: EmotionAnalyticsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmotionAnalytics
     */
    omit?: EmotionAnalyticsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmotionAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model Insight
   */

  export type AggregateInsight = {
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  export type InsightMinAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    summary: string | null
    style: string | null
    recentEmotion: string | null
    suggestion: string | null
    createdAt: Date | null
  }

  export type InsightMaxAggregateOutputType = {
    id: string | null
    relationshipId: string | null
    summary: string | null
    style: string | null
    recentEmotion: string | null
    suggestion: string | null
    createdAt: Date | null
  }

  export type InsightCountAggregateOutputType = {
    id: number
    relationshipId: number
    summary: number
    style: number
    recentEmotion: number
    suggestion: number
    createdAt: number
    _all: number
  }


  export type InsightMinAggregateInputType = {
    id?: true
    relationshipId?: true
    summary?: true
    style?: true
    recentEmotion?: true
    suggestion?: true
    createdAt?: true
  }

  export type InsightMaxAggregateInputType = {
    id?: true
    relationshipId?: true
    summary?: true
    style?: true
    recentEmotion?: true
    suggestion?: true
    createdAt?: true
  }

  export type InsightCountAggregateInputType = {
    id?: true
    relationshipId?: true
    summary?: true
    style?: true
    recentEmotion?: true
    suggestion?: true
    createdAt?: true
    _all?: true
  }

  export type InsightAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insight to aggregate.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Insights
    **/
    _count?: true | InsightCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InsightMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InsightMaxAggregateInputType
  }

  export type GetInsightAggregateType<T extends InsightAggregateArgs> = {
        [P in keyof T & keyof AggregateInsight]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInsight[P]>
      : GetScalarType<T[P], AggregateInsight[P]>
  }




  export type InsightGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InsightWhereInput
    orderBy?: InsightOrderByWithAggregationInput | InsightOrderByWithAggregationInput[]
    by: InsightScalarFieldEnum[] | InsightScalarFieldEnum
    having?: InsightScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InsightCountAggregateInputType | true
    _min?: InsightMinAggregateInputType
    _max?: InsightMaxAggregateInputType
  }

  export type InsightGroupByOutputType = {
    id: string
    relationshipId: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt: Date
    _count: InsightCountAggregateOutputType | null
    _min: InsightMinAggregateOutputType | null
    _max: InsightMaxAggregateOutputType | null
  }

  type GetInsightGroupByPayload<T extends InsightGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InsightGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InsightGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InsightGroupByOutputType[P]>
            : GetScalarType<T[P], InsightGroupByOutputType[P]>
        }
      >
    >


  export type InsightSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    summary?: boolean
    style?: boolean
    recentEmotion?: boolean
    suggestion?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    summary?: boolean
    style?: boolean
    recentEmotion?: boolean
    suggestion?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    relationshipId?: boolean
    summary?: boolean
    style?: boolean
    recentEmotion?: boolean
    suggestion?: boolean
    createdAt?: boolean
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["insight"]>

  export type InsightSelectScalar = {
    id?: boolean
    relationshipId?: boolean
    summary?: boolean
    style?: boolean
    recentEmotion?: boolean
    suggestion?: boolean
    createdAt?: boolean
  }

  export type InsightOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "relationshipId" | "summary" | "style" | "recentEmotion" | "suggestion" | "createdAt", ExtArgs["result"]["insight"]>
  export type InsightInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type InsightIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }
  export type InsightIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relationship?: boolean | RelationshipDefaultArgs<ExtArgs>
  }

  export type $InsightPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Insight"
    objects: {
      relationship: Prisma.$RelationshipPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      relationshipId: string
      summary: string
      style: string
      recentEmotion: string
      suggestion: string
      createdAt: Date
    }, ExtArgs["result"]["insight"]>
    composites: {}
  }

  type InsightGetPayload<S extends boolean | null | undefined | InsightDefaultArgs> = $Result.GetResult<Prisma.$InsightPayload, S>

  type InsightCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InsightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InsightCountAggregateInputType | true
    }

  export interface InsightDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Insight'], meta: { name: 'Insight' } }
    /**
     * Find zero or one Insight that matches the filter.
     * @param {InsightFindUniqueArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InsightFindUniqueArgs>(args: SelectSubset<T, InsightFindUniqueArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Insight that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InsightFindUniqueOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InsightFindUniqueOrThrowArgs>(args: SelectSubset<T, InsightFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Insight that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InsightFindFirstArgs>(args?: SelectSubset<T, InsightFindFirstArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Insight that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindFirstOrThrowArgs} args - Arguments to find a Insight
     * @example
     * // Get one Insight
     * const insight = await prisma.insight.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InsightFindFirstOrThrowArgs>(args?: SelectSubset<T, InsightFindFirstOrThrowArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Insights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Insights
     * const insights = await prisma.insight.findMany()
     * 
     * // Get first 10 Insights
     * const insights = await prisma.insight.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const insightWithIdOnly = await prisma.insight.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InsightFindManyArgs>(args?: SelectSubset<T, InsightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Insight.
     * @param {InsightCreateArgs} args - Arguments to create a Insight.
     * @example
     * // Create one Insight
     * const Insight = await prisma.insight.create({
     *   data: {
     *     // ... data to create a Insight
     *   }
     * })
     * 
     */
    create<T extends InsightCreateArgs>(args: SelectSubset<T, InsightCreateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Insights.
     * @param {InsightCreateManyArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InsightCreateManyArgs>(args?: SelectSubset<T, InsightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Insights and returns the data saved in the database.
     * @param {InsightCreateManyAndReturnArgs} args - Arguments to create many Insights.
     * @example
     * // Create many Insights
     * const insight = await prisma.insight.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Insights and only return the `id`
     * const insightWithIdOnly = await prisma.insight.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InsightCreateManyAndReturnArgs>(args?: SelectSubset<T, InsightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Insight.
     * @param {InsightDeleteArgs} args - Arguments to delete one Insight.
     * @example
     * // Delete one Insight
     * const Insight = await prisma.insight.delete({
     *   where: {
     *     // ... filter to delete one Insight
     *   }
     * })
     * 
     */
    delete<T extends InsightDeleteArgs>(args: SelectSubset<T, InsightDeleteArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Insight.
     * @param {InsightUpdateArgs} args - Arguments to update one Insight.
     * @example
     * // Update one Insight
     * const insight = await prisma.insight.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InsightUpdateArgs>(args: SelectSubset<T, InsightUpdateArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Insights.
     * @param {InsightDeleteManyArgs} args - Arguments to filter Insights to delete.
     * @example
     * // Delete a few Insights
     * const { count } = await prisma.insight.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InsightDeleteManyArgs>(args?: SelectSubset<T, InsightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Insights
     * const insight = await prisma.insight.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InsightUpdateManyArgs>(args: SelectSubset<T, InsightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Insights and returns the data updated in the database.
     * @param {InsightUpdateManyAndReturnArgs} args - Arguments to update many Insights.
     * @example
     * // Update many Insights
     * const insight = await prisma.insight.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Insights and only return the `id`
     * const insightWithIdOnly = await prisma.insight.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InsightUpdateManyAndReturnArgs>(args: SelectSubset<T, InsightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Insight.
     * @param {InsightUpsertArgs} args - Arguments to update or create a Insight.
     * @example
     * // Update or create a Insight
     * const insight = await prisma.insight.upsert({
     *   create: {
     *     // ... data to create a Insight
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Insight we want to update
     *   }
     * })
     */
    upsert<T extends InsightUpsertArgs>(args: SelectSubset<T, InsightUpsertArgs<ExtArgs>>): Prisma__InsightClient<$Result.GetResult<Prisma.$InsightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Insights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightCountArgs} args - Arguments to filter Insights to count.
     * @example
     * // Count the number of Insights
     * const count = await prisma.insight.count({
     *   where: {
     *     // ... the filter for the Insights we want to count
     *   }
     * })
    **/
    count<T extends InsightCountArgs>(
      args?: Subset<T, InsightCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InsightCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InsightAggregateArgs>(args: Subset<T, InsightAggregateArgs>): Prisma.PrismaPromise<GetInsightAggregateType<T>>

    /**
     * Group by Insight.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InsightGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InsightGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InsightGroupByArgs['orderBy'] }
        : { orderBy?: InsightGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InsightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInsightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Insight model
   */
  readonly fields: InsightFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Insight.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InsightClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relationship<T extends RelationshipDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RelationshipDefaultArgs<ExtArgs>>): Prisma__RelationshipClient<$Result.GetResult<Prisma.$RelationshipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Insight model
   */
  interface InsightFieldRefs {
    readonly id: FieldRef<"Insight", 'String'>
    readonly relationshipId: FieldRef<"Insight", 'String'>
    readonly summary: FieldRef<"Insight", 'String'>
    readonly style: FieldRef<"Insight", 'String'>
    readonly recentEmotion: FieldRef<"Insight", 'String'>
    readonly suggestion: FieldRef<"Insight", 'String'>
    readonly createdAt: FieldRef<"Insight", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Insight findUnique
   */
  export type InsightFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findUniqueOrThrow
   */
  export type InsightFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight findFirst
   */
  export type InsightFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findFirstOrThrow
   */
  export type InsightFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insight to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Insights.
     */
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight findMany
   */
  export type InsightFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter, which Insights to fetch.
     */
    where?: InsightWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Insights to fetch.
     */
    orderBy?: InsightOrderByWithRelationInput | InsightOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Insights.
     */
    cursor?: InsightWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Insights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Insights.
     */
    skip?: number
    distinct?: InsightScalarFieldEnum | InsightScalarFieldEnum[]
  }

  /**
   * Insight create
   */
  export type InsightCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to create a Insight.
     */
    data: XOR<InsightCreateInput, InsightUncheckedCreateInput>
  }

  /**
   * Insight createMany
   */
  export type InsightCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Insight createManyAndReturn
   */
  export type InsightCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * The data used to create many Insights.
     */
    data: InsightCreateManyInput | InsightCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insight update
   */
  export type InsightUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The data needed to update a Insight.
     */
    data: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
    /**
     * Choose, which Insight to update.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight updateMany
   */
  export type InsightUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Insights.
     */
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyInput>
    /**
     * Filter which Insights to update
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to update.
     */
    limit?: number
  }

  /**
   * Insight updateManyAndReturn
   */
  export type InsightUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * The data used to update Insights.
     */
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyInput>
    /**
     * Filter which Insights to update
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Insight upsert
   */
  export type InsightUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * The filter to search for the Insight to update in case it exists.
     */
    where: InsightWhereUniqueInput
    /**
     * In case the Insight found by the `where` argument doesn't exist, create a new Insight with this data.
     */
    create: XOR<InsightCreateInput, InsightUncheckedCreateInput>
    /**
     * In case the Insight was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InsightUpdateInput, InsightUncheckedUpdateInput>
  }

  /**
   * Insight delete
   */
  export type InsightDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
    /**
     * Filter which Insight to delete.
     */
    where: InsightWhereUniqueInput
  }

  /**
   * Insight deleteMany
   */
  export type InsightDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Insights to delete
     */
    where?: InsightWhereInput
    /**
     * Limit how many Insights to delete.
     */
    limit?: number
  }

  /**
   * Insight without action
   */
  export type InsightDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Insight
     */
    select?: InsightSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Insight
     */
    omit?: InsightOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InsightInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RelationshipScalarFieldEnum: {
    id: 'id',
    user1Id: 'user1Id',
    user2Id: 'user2Id',
    inviteCode: 'inviteCode',
    connectedAt: 'connectedAt',
    createdAt: 'createdAt'
  };

  export type RelationshipScalarFieldEnum = (typeof RelationshipScalarFieldEnum)[keyof typeof RelationshipScalarFieldEnum]


  export const AnniversaryScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    title: 'title',
    date: 'date',
    type: 'type',
    createdAt: 'createdAt'
  };

  export type AnniversaryScalarFieldEnum = (typeof AnniversaryScalarFieldEnum)[keyof typeof AnniversaryScalarFieldEnum]


  export const LetterScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    senderId: 'senderId',
    content: 'content',
    imageUrl: 'imageUrl',
    voiceUrl: 'voiceUrl',
    isSecret: 'isSecret',
    openAt: 'openAt',
    createdAt: 'createdAt'
  };

  export type LetterScalarFieldEnum = (typeof LetterScalarFieldEnum)[keyof typeof LetterScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    title: 'title',
    pdfUrl: 'pdfUrl',
    status: 'status',
    generatedAt: 'generatedAt'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const ReflectionScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    type: 'type',
    resultText: 'resultText',
    createdAt: 'createdAt'
  };

  export type ReflectionScalarFieldEnum = (typeof ReflectionScalarFieldEnum)[keyof typeof ReflectionScalarFieldEnum]


  export const EmotionAnalyticsScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    positive: 'positive',
    neutral: 'neutral',
    negative: 'negative',
    analyzedAt: 'analyzedAt'
  };

  export type EmotionAnalyticsScalarFieldEnum = (typeof EmotionAnalyticsScalarFieldEnum)[keyof typeof EmotionAnalyticsScalarFieldEnum]


  export const InsightScalarFieldEnum: {
    id: 'id',
    relationshipId: 'relationshipId',
    summary: 'summary',
    style: 'style',
    recentEmotion: 'recentEmotion',
    suggestion: 'suggestion',
    createdAt: 'createdAt'
  };

  export type InsightScalarFieldEnum = (typeof InsightScalarFieldEnum)[keyof typeof InsightScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    sentLetters?: LetterListRelationFilter
    relationships1?: RelationshipListRelationFilter
    relationships2?: RelationshipListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentLetters?: LetterOrderByRelationAggregateInput
    relationships1?: RelationshipOrderByRelationAggregateInput
    relationships2?: RelationshipOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    sentLetters?: LetterListRelationFilter
    relationships1?: RelationshipListRelationFilter
    relationships2?: RelationshipListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RelationshipWhereInput = {
    AND?: RelationshipWhereInput | RelationshipWhereInput[]
    OR?: RelationshipWhereInput[]
    NOT?: RelationshipWhereInput | RelationshipWhereInput[]
    id?: StringFilter<"Relationship"> | string
    user1Id?: StringFilter<"Relationship"> | string
    user2Id?: StringNullableFilter<"Relationship"> | string | null
    inviteCode?: StringFilter<"Relationship"> | string
    connectedAt?: DateTimeNullableFilter<"Relationship"> | Date | string | null
    createdAt?: DateTimeFilter<"Relationship"> | Date | string
    user1?: XOR<UserScalarRelationFilter, UserWhereInput>
    user2?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    letters?: LetterListRelationFilter
    books?: BookListRelationFilter
    reflections?: ReflectionListRelationFilter
    analytics?: EmotionAnalyticsListRelationFilter
    insights?: InsightListRelationFilter
    anniversaries?: AnniversaryListRelationFilter
  }

  export type RelationshipOrderByWithRelationInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrderInput | SortOrder
    inviteCode?: SortOrder
    connectedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user1?: UserOrderByWithRelationInput
    user2?: UserOrderByWithRelationInput
    letters?: LetterOrderByRelationAggregateInput
    books?: BookOrderByRelationAggregateInput
    reflections?: ReflectionOrderByRelationAggregateInput
    analytics?: EmotionAnalyticsOrderByRelationAggregateInput
    insights?: InsightOrderByRelationAggregateInput
    anniversaries?: AnniversaryOrderByRelationAggregateInput
  }

  export type RelationshipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    inviteCode?: string
    AND?: RelationshipWhereInput | RelationshipWhereInput[]
    OR?: RelationshipWhereInput[]
    NOT?: RelationshipWhereInput | RelationshipWhereInput[]
    user1Id?: StringFilter<"Relationship"> | string
    user2Id?: StringNullableFilter<"Relationship"> | string | null
    connectedAt?: DateTimeNullableFilter<"Relationship"> | Date | string | null
    createdAt?: DateTimeFilter<"Relationship"> | Date | string
    user1?: XOR<UserScalarRelationFilter, UserWhereInput>
    user2?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    letters?: LetterListRelationFilter
    books?: BookListRelationFilter
    reflections?: ReflectionListRelationFilter
    analytics?: EmotionAnalyticsListRelationFilter
    insights?: InsightListRelationFilter
    anniversaries?: AnniversaryListRelationFilter
  }, "id" | "inviteCode">

  export type RelationshipOrderByWithAggregationInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrderInput | SortOrder
    inviteCode?: SortOrder
    connectedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RelationshipCountOrderByAggregateInput
    _max?: RelationshipMaxOrderByAggregateInput
    _min?: RelationshipMinOrderByAggregateInput
  }

  export type RelationshipScalarWhereWithAggregatesInput = {
    AND?: RelationshipScalarWhereWithAggregatesInput | RelationshipScalarWhereWithAggregatesInput[]
    OR?: RelationshipScalarWhereWithAggregatesInput[]
    NOT?: RelationshipScalarWhereWithAggregatesInput | RelationshipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Relationship"> | string
    user1Id?: StringWithAggregatesFilter<"Relationship"> | string
    user2Id?: StringNullableWithAggregatesFilter<"Relationship"> | string | null
    inviteCode?: StringWithAggregatesFilter<"Relationship"> | string
    connectedAt?: DateTimeNullableWithAggregatesFilter<"Relationship"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Relationship"> | Date | string
  }

  export type AnniversaryWhereInput = {
    AND?: AnniversaryWhereInput | AnniversaryWhereInput[]
    OR?: AnniversaryWhereInput[]
    NOT?: AnniversaryWhereInput | AnniversaryWhereInput[]
    id?: StringFilter<"Anniversary"> | string
    relationshipId?: StringFilter<"Anniversary"> | string
    title?: StringFilter<"Anniversary"> | string
    date?: DateTimeFilter<"Anniversary"> | Date | string
    type?: StringFilter<"Anniversary"> | string
    createdAt?: DateTimeFilter<"Anniversary"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }

  export type AnniversaryOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
  }

  export type AnniversaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnniversaryWhereInput | AnniversaryWhereInput[]
    OR?: AnniversaryWhereInput[]
    NOT?: AnniversaryWhereInput | AnniversaryWhereInput[]
    relationshipId?: StringFilter<"Anniversary"> | string
    title?: StringFilter<"Anniversary"> | string
    date?: DateTimeFilter<"Anniversary"> | Date | string
    type?: StringFilter<"Anniversary"> | string
    createdAt?: DateTimeFilter<"Anniversary"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }, "id">

  export type AnniversaryOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    _count?: AnniversaryCountOrderByAggregateInput
    _max?: AnniversaryMaxOrderByAggregateInput
    _min?: AnniversaryMinOrderByAggregateInput
  }

  export type AnniversaryScalarWhereWithAggregatesInput = {
    AND?: AnniversaryScalarWhereWithAggregatesInput | AnniversaryScalarWhereWithAggregatesInput[]
    OR?: AnniversaryScalarWhereWithAggregatesInput[]
    NOT?: AnniversaryScalarWhereWithAggregatesInput | AnniversaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Anniversary"> | string
    relationshipId?: StringWithAggregatesFilter<"Anniversary"> | string
    title?: StringWithAggregatesFilter<"Anniversary"> | string
    date?: DateTimeWithAggregatesFilter<"Anniversary"> | Date | string
    type?: StringWithAggregatesFilter<"Anniversary"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Anniversary"> | Date | string
  }

  export type LetterWhereInput = {
    AND?: LetterWhereInput | LetterWhereInput[]
    OR?: LetterWhereInput[]
    NOT?: LetterWhereInput | LetterWhereInput[]
    id?: StringFilter<"Letter"> | string
    relationshipId?: StringFilter<"Letter"> | string
    senderId?: StringFilter<"Letter"> | string
    content?: StringFilter<"Letter"> | string
    imageUrl?: StringNullableFilter<"Letter"> | string | null
    voiceUrl?: StringNullableFilter<"Letter"> | string | null
    isSecret?: BoolFilter<"Letter"> | boolean
    openAt?: DateTimeNullableFilter<"Letter"> | Date | string | null
    createdAt?: DateTimeFilter<"Letter"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type LetterOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    voiceUrl?: SortOrderInput | SortOrder
    isSecret?: SortOrder
    openAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type LetterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LetterWhereInput | LetterWhereInput[]
    OR?: LetterWhereInput[]
    NOT?: LetterWhereInput | LetterWhereInput[]
    relationshipId?: StringFilter<"Letter"> | string
    senderId?: StringFilter<"Letter"> | string
    content?: StringFilter<"Letter"> | string
    imageUrl?: StringNullableFilter<"Letter"> | string | null
    voiceUrl?: StringNullableFilter<"Letter"> | string | null
    isSecret?: BoolFilter<"Letter"> | boolean
    openAt?: DateTimeNullableFilter<"Letter"> | Date | string | null
    createdAt?: DateTimeFilter<"Letter"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type LetterOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    voiceUrl?: SortOrderInput | SortOrder
    isSecret?: SortOrder
    openAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LetterCountOrderByAggregateInput
    _max?: LetterMaxOrderByAggregateInput
    _min?: LetterMinOrderByAggregateInput
  }

  export type LetterScalarWhereWithAggregatesInput = {
    AND?: LetterScalarWhereWithAggregatesInput | LetterScalarWhereWithAggregatesInput[]
    OR?: LetterScalarWhereWithAggregatesInput[]
    NOT?: LetterScalarWhereWithAggregatesInput | LetterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Letter"> | string
    relationshipId?: StringWithAggregatesFilter<"Letter"> | string
    senderId?: StringWithAggregatesFilter<"Letter"> | string
    content?: StringWithAggregatesFilter<"Letter"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Letter"> | string | null
    voiceUrl?: StringNullableWithAggregatesFilter<"Letter"> | string | null
    isSecret?: BoolWithAggregatesFilter<"Letter"> | boolean
    openAt?: DateTimeNullableWithAggregatesFilter<"Letter"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Letter"> | Date | string
  }

  export type BookWhereInput = {
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    id?: StringFilter<"Book"> | string
    relationshipId?: StringFilter<"Book"> | string
    title?: StringFilter<"Book"> | string
    pdfUrl?: StringFilter<"Book"> | string
    status?: StringFilter<"Book"> | string
    generatedAt?: DateTimeFilter<"Book"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    pdfUrl?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
  }

  export type BookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    relationshipId?: StringFilter<"Book"> | string
    title?: StringFilter<"Book"> | string
    pdfUrl?: StringFilter<"Book"> | string
    status?: StringFilter<"Book"> | string
    generatedAt?: DateTimeFilter<"Book"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }, "id">

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    pdfUrl?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    OR?: BookScalarWhereWithAggregatesInput[]
    NOT?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Book"> | string
    relationshipId?: StringWithAggregatesFilter<"Book"> | string
    title?: StringWithAggregatesFilter<"Book"> | string
    pdfUrl?: StringWithAggregatesFilter<"Book"> | string
    status?: StringWithAggregatesFilter<"Book"> | string
    generatedAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
  }

  export type ReflectionWhereInput = {
    AND?: ReflectionWhereInput | ReflectionWhereInput[]
    OR?: ReflectionWhereInput[]
    NOT?: ReflectionWhereInput | ReflectionWhereInput[]
    id?: StringFilter<"Reflection"> | string
    relationshipId?: StringFilter<"Reflection"> | string
    type?: StringFilter<"Reflection"> | string
    resultText?: StringFilter<"Reflection"> | string
    createdAt?: DateTimeFilter<"Reflection"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }

  export type ReflectionOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    type?: SortOrder
    resultText?: SortOrder
    createdAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
  }

  export type ReflectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReflectionWhereInput | ReflectionWhereInput[]
    OR?: ReflectionWhereInput[]
    NOT?: ReflectionWhereInput | ReflectionWhereInput[]
    relationshipId?: StringFilter<"Reflection"> | string
    type?: StringFilter<"Reflection"> | string
    resultText?: StringFilter<"Reflection"> | string
    createdAt?: DateTimeFilter<"Reflection"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }, "id">

  export type ReflectionOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    type?: SortOrder
    resultText?: SortOrder
    createdAt?: SortOrder
    _count?: ReflectionCountOrderByAggregateInput
    _max?: ReflectionMaxOrderByAggregateInput
    _min?: ReflectionMinOrderByAggregateInput
  }

  export type ReflectionScalarWhereWithAggregatesInput = {
    AND?: ReflectionScalarWhereWithAggregatesInput | ReflectionScalarWhereWithAggregatesInput[]
    OR?: ReflectionScalarWhereWithAggregatesInput[]
    NOT?: ReflectionScalarWhereWithAggregatesInput | ReflectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reflection"> | string
    relationshipId?: StringWithAggregatesFilter<"Reflection"> | string
    type?: StringWithAggregatesFilter<"Reflection"> | string
    resultText?: StringWithAggregatesFilter<"Reflection"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reflection"> | Date | string
  }

  export type EmotionAnalyticsWhereInput = {
    AND?: EmotionAnalyticsWhereInput | EmotionAnalyticsWhereInput[]
    OR?: EmotionAnalyticsWhereInput[]
    NOT?: EmotionAnalyticsWhereInput | EmotionAnalyticsWhereInput[]
    id?: StringFilter<"EmotionAnalytics"> | string
    relationshipId?: StringFilter<"EmotionAnalytics"> | string
    positive?: IntFilter<"EmotionAnalytics"> | number
    neutral?: IntFilter<"EmotionAnalytics"> | number
    negative?: IntFilter<"EmotionAnalytics"> | number
    analyzedAt?: DateTimeFilter<"EmotionAnalytics"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }

  export type EmotionAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
    analyzedAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
  }

  export type EmotionAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmotionAnalyticsWhereInput | EmotionAnalyticsWhereInput[]
    OR?: EmotionAnalyticsWhereInput[]
    NOT?: EmotionAnalyticsWhereInput | EmotionAnalyticsWhereInput[]
    relationshipId?: StringFilter<"EmotionAnalytics"> | string
    positive?: IntFilter<"EmotionAnalytics"> | number
    neutral?: IntFilter<"EmotionAnalytics"> | number
    negative?: IntFilter<"EmotionAnalytics"> | number
    analyzedAt?: DateTimeFilter<"EmotionAnalytics"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }, "id">

  export type EmotionAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
    analyzedAt?: SortOrder
    _count?: EmotionAnalyticsCountOrderByAggregateInput
    _avg?: EmotionAnalyticsAvgOrderByAggregateInput
    _max?: EmotionAnalyticsMaxOrderByAggregateInput
    _min?: EmotionAnalyticsMinOrderByAggregateInput
    _sum?: EmotionAnalyticsSumOrderByAggregateInput
  }

  export type EmotionAnalyticsScalarWhereWithAggregatesInput = {
    AND?: EmotionAnalyticsScalarWhereWithAggregatesInput | EmotionAnalyticsScalarWhereWithAggregatesInput[]
    OR?: EmotionAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: EmotionAnalyticsScalarWhereWithAggregatesInput | EmotionAnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmotionAnalytics"> | string
    relationshipId?: StringWithAggregatesFilter<"EmotionAnalytics"> | string
    positive?: IntWithAggregatesFilter<"EmotionAnalytics"> | number
    neutral?: IntWithAggregatesFilter<"EmotionAnalytics"> | number
    negative?: IntWithAggregatesFilter<"EmotionAnalytics"> | number
    analyzedAt?: DateTimeWithAggregatesFilter<"EmotionAnalytics"> | Date | string
  }

  export type InsightWhereInput = {
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    id?: StringFilter<"Insight"> | string
    relationshipId?: StringFilter<"Insight"> | string
    summary?: StringFilter<"Insight"> | string
    style?: StringFilter<"Insight"> | string
    recentEmotion?: StringFilter<"Insight"> | string
    suggestion?: StringFilter<"Insight"> | string
    createdAt?: DateTimeFilter<"Insight"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }

  export type InsightOrderByWithRelationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    summary?: SortOrder
    style?: SortOrder
    recentEmotion?: SortOrder
    suggestion?: SortOrder
    createdAt?: SortOrder
    relationship?: RelationshipOrderByWithRelationInput
  }

  export type InsightWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InsightWhereInput | InsightWhereInput[]
    OR?: InsightWhereInput[]
    NOT?: InsightWhereInput | InsightWhereInput[]
    relationshipId?: StringFilter<"Insight"> | string
    summary?: StringFilter<"Insight"> | string
    style?: StringFilter<"Insight"> | string
    recentEmotion?: StringFilter<"Insight"> | string
    suggestion?: StringFilter<"Insight"> | string
    createdAt?: DateTimeFilter<"Insight"> | Date | string
    relationship?: XOR<RelationshipScalarRelationFilter, RelationshipWhereInput>
  }, "id">

  export type InsightOrderByWithAggregationInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    summary?: SortOrder
    style?: SortOrder
    recentEmotion?: SortOrder
    suggestion?: SortOrder
    createdAt?: SortOrder
    _count?: InsightCountOrderByAggregateInput
    _max?: InsightMaxOrderByAggregateInput
    _min?: InsightMinOrderByAggregateInput
  }

  export type InsightScalarWhereWithAggregatesInput = {
    AND?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    OR?: InsightScalarWhereWithAggregatesInput[]
    NOT?: InsightScalarWhereWithAggregatesInput | InsightScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Insight"> | string
    relationshipId?: StringWithAggregatesFilter<"Insight"> | string
    summary?: StringWithAggregatesFilter<"Insight"> | string
    style?: StringWithAggregatesFilter<"Insight"> | string
    recentEmotion?: StringWithAggregatesFilter<"Insight"> | string
    suggestion?: StringWithAggregatesFilter<"Insight"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Insight"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterCreateNestedManyWithoutSenderInput
    relationships1?: RelationshipCreateNestedManyWithoutUser1Input
    relationships2?: RelationshipCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterUncheckedCreateNestedManyWithoutSenderInput
    relationships1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    relationships2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUpdateManyWithoutSenderNestedInput
    relationships1?: RelationshipUpdateManyWithoutUser1NestedInput
    relationships2?: RelationshipUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUncheckedUpdateManyWithoutSenderNestedInput
    relationships1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    relationships2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelationshipCreateInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipCreateManyInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RelationshipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelationshipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryCreateInput = {
    id?: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
    relationship: RelationshipCreateNestedOneWithoutAnniversariesInput
  }

  export type AnniversaryUncheckedCreateInput = {
    id?: string
    relationshipId: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
  }

  export type AnniversaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutAnniversariesNestedInput
  }

  export type AnniversaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryCreateManyInput = {
    id?: string
    relationshipId: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
  }

  export type AnniversaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateInput = {
    id?: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
    relationship: RelationshipCreateNestedOneWithoutLettersInput
    sender: UserCreateNestedOneWithoutSentLettersInput
  }

  export type LetterUncheckedCreateInput = {
    id?: string
    relationshipId: string
    senderId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LetterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutLettersNestedInput
    sender?: UserUpdateOneRequiredWithoutSentLettersNestedInput
  }

  export type LetterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateManyInput = {
    id?: string
    relationshipId: string
    senderId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LetterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateInput = {
    id?: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
    relationship: RelationshipCreateNestedOneWithoutBooksInput
  }

  export type BookUncheckedCreateInput = {
    id?: string
    relationshipId: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
  }

  export type BookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutBooksNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateManyInput = {
    id?: string
    relationshipId: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
  }

  export type BookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionCreateInput = {
    id?: string
    type: string
    resultText: string
    createdAt?: Date | string
    relationship: RelationshipCreateNestedOneWithoutReflectionsInput
  }

  export type ReflectionUncheckedCreateInput = {
    id?: string
    relationshipId: string
    type: string
    resultText: string
    createdAt?: Date | string
  }

  export type ReflectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutReflectionsNestedInput
  }

  export type ReflectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionCreateManyInput = {
    id?: string
    relationshipId: string
    type: string
    resultText: string
    createdAt?: Date | string
  }

  export type ReflectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsCreateInput = {
    id?: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
    relationship: RelationshipCreateNestedOneWithoutAnalyticsInput
  }

  export type EmotionAnalyticsUncheckedCreateInput = {
    id?: string
    relationshipId: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
  }

  export type EmotionAnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutAnalyticsNestedInput
  }

  export type EmotionAnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsCreateManyInput = {
    id?: string
    relationshipId: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
  }

  export type EmotionAnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightCreateInput = {
    id?: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
    relationship: RelationshipCreateNestedOneWithoutInsightsInput
  }

  export type InsightUncheckedCreateInput = {
    id?: string
    relationshipId: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
  }

  export type InsightUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutInsightsNestedInput
  }

  export type InsightUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightCreateManyInput = {
    id?: string
    relationshipId: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
  }

  export type InsightUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LetterListRelationFilter = {
    every?: LetterWhereInput
    some?: LetterWhereInput
    none?: LetterWhereInput
  }

  export type RelationshipListRelationFilter = {
    every?: RelationshipWhereInput
    some?: RelationshipWhereInput
    none?: RelationshipWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LetterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelationshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type ReflectionListRelationFilter = {
    every?: ReflectionWhereInput
    some?: ReflectionWhereInput
    none?: ReflectionWhereInput
  }

  export type EmotionAnalyticsListRelationFilter = {
    every?: EmotionAnalyticsWhereInput
    some?: EmotionAnalyticsWhereInput
    none?: EmotionAnalyticsWhereInput
  }

  export type InsightListRelationFilter = {
    every?: InsightWhereInput
    some?: InsightWhereInput
    none?: InsightWhereInput
  }

  export type AnniversaryListRelationFilter = {
    every?: AnniversaryWhereInput
    some?: AnniversaryWhereInput
    none?: AnniversaryWhereInput
  }

  export type BookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReflectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmotionAnalyticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InsightOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnniversaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelationshipCountOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    inviteCode?: SortOrder
    connectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RelationshipMaxOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    inviteCode?: SortOrder
    connectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RelationshipMinOrderByAggregateInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    inviteCode?: SortOrder
    connectedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type RelationshipScalarRelationFilter = {
    is?: RelationshipWhereInput
    isNot?: RelationshipWhereInput
  }

  export type AnniversaryCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AnniversaryMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type AnniversaryMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    date?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LetterCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    voiceUrl?: SortOrder
    isSecret?: SortOrder
    openAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LetterMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    voiceUrl?: SortOrder
    isSecret?: SortOrder
    openAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LetterMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    voiceUrl?: SortOrder
    isSecret?: SortOrder
    openAt?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    pdfUrl?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    pdfUrl?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    title?: SortOrder
    pdfUrl?: SortOrder
    status?: SortOrder
    generatedAt?: SortOrder
  }

  export type ReflectionCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    type?: SortOrder
    resultText?: SortOrder
    createdAt?: SortOrder
  }

  export type ReflectionMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    type?: SortOrder
    resultText?: SortOrder
    createdAt?: SortOrder
  }

  export type ReflectionMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    type?: SortOrder
    resultText?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EmotionAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
    analyzedAt?: SortOrder
  }

  export type EmotionAnalyticsAvgOrderByAggregateInput = {
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
  }

  export type EmotionAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
    analyzedAt?: SortOrder
  }

  export type EmotionAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
    analyzedAt?: SortOrder
  }

  export type EmotionAnalyticsSumOrderByAggregateInput = {
    positive?: SortOrder
    neutral?: SortOrder
    negative?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type InsightCountOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    summary?: SortOrder
    style?: SortOrder
    recentEmotion?: SortOrder
    suggestion?: SortOrder
    createdAt?: SortOrder
  }

  export type InsightMaxOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    summary?: SortOrder
    style?: SortOrder
    recentEmotion?: SortOrder
    suggestion?: SortOrder
    createdAt?: SortOrder
  }

  export type InsightMinOrderByAggregateInput = {
    id?: SortOrder
    relationshipId?: SortOrder
    summary?: SortOrder
    style?: SortOrder
    recentEmotion?: SortOrder
    suggestion?: SortOrder
    createdAt?: SortOrder
  }

  export type LetterCreateNestedManyWithoutSenderInput = {
    create?: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput> | LetterCreateWithoutSenderInput[] | LetterUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutSenderInput | LetterCreateOrConnectWithoutSenderInput[]
    createMany?: LetterCreateManySenderInputEnvelope
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
  }

  export type RelationshipCreateNestedManyWithoutUser1Input = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipCreateNestedManyWithoutUser2Input = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type LetterUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput> | LetterCreateWithoutSenderInput[] | LetterUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutSenderInput | LetterCreateOrConnectWithoutSenderInput[]
    createMany?: LetterCreateManySenderInputEnvelope
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
  }

  export type RelationshipUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type RelationshipUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LetterUpdateManyWithoutSenderNestedInput = {
    create?: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput> | LetterCreateWithoutSenderInput[] | LetterUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutSenderInput | LetterCreateOrConnectWithoutSenderInput[]
    upsert?: LetterUpsertWithWhereUniqueWithoutSenderInput | LetterUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: LetterCreateManySenderInputEnvelope
    set?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    disconnect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    delete?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    update?: LetterUpdateWithWhereUniqueWithoutSenderInput | LetterUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: LetterUpdateManyWithWhereWithoutSenderInput | LetterUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: LetterScalarWhereInput | LetterScalarWhereInput[]
  }

  export type RelationshipUpdateManyWithoutUser1NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser1Input | RelationshipUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser1Input | RelationshipUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser1Input | RelationshipUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUpdateManyWithoutUser2NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser2Input | RelationshipUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser2Input | RelationshipUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser2Input | RelationshipUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type LetterUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput> | LetterCreateWithoutSenderInput[] | LetterUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutSenderInput | LetterCreateOrConnectWithoutSenderInput[]
    upsert?: LetterUpsertWithWhereUniqueWithoutSenderInput | LetterUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: LetterCreateManySenderInputEnvelope
    set?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    disconnect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    delete?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    update?: LetterUpdateWithWhereUniqueWithoutSenderInput | LetterUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: LetterUpdateManyWithWhereWithoutSenderInput | LetterUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: LetterScalarWhereInput | LetterScalarWhereInput[]
  }

  export type RelationshipUncheckedUpdateManyWithoutUser1NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input> | RelationshipCreateWithoutUser1Input[] | RelationshipUncheckedCreateWithoutUser1Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser1Input | RelationshipCreateOrConnectWithoutUser1Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser1Input | RelationshipUpsertWithWhereUniqueWithoutUser1Input[]
    createMany?: RelationshipCreateManyUser1InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser1Input | RelationshipUpdateWithWhereUniqueWithoutUser1Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser1Input | RelationshipUpdateManyWithWhereWithoutUser1Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type RelationshipUncheckedUpdateManyWithoutUser2NestedInput = {
    create?: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input> | RelationshipCreateWithoutUser2Input[] | RelationshipUncheckedCreateWithoutUser2Input[]
    connectOrCreate?: RelationshipCreateOrConnectWithoutUser2Input | RelationshipCreateOrConnectWithoutUser2Input[]
    upsert?: RelationshipUpsertWithWhereUniqueWithoutUser2Input | RelationshipUpsertWithWhereUniqueWithoutUser2Input[]
    createMany?: RelationshipCreateManyUser2InputEnvelope
    set?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    disconnect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    delete?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    connect?: RelationshipWhereUniqueInput | RelationshipWhereUniqueInput[]
    update?: RelationshipUpdateWithWhereUniqueWithoutUser2Input | RelationshipUpdateWithWhereUniqueWithoutUser2Input[]
    updateMany?: RelationshipUpdateManyWithWhereWithoutUser2Input | RelationshipUpdateManyWithWhereWithoutUser2Input[]
    deleteMany?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRelationships1Input = {
    create?: XOR<UserCreateWithoutRelationships1Input, UserUncheckedCreateWithoutRelationships1Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelationships1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRelationships2Input = {
    create?: XOR<UserCreateWithoutRelationships2Input, UserUncheckedCreateWithoutRelationships2Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelationships2Input
    connect?: UserWhereUniqueInput
  }

  export type LetterCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput> | LetterCreateWithoutRelationshipInput[] | LetterUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutRelationshipInput | LetterCreateOrConnectWithoutRelationshipInput[]
    createMany?: LetterCreateManyRelationshipInputEnvelope
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
  }

  export type BookCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput> | BookCreateWithoutRelationshipInput[] | BookUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: BookCreateOrConnectWithoutRelationshipInput | BookCreateOrConnectWithoutRelationshipInput[]
    createMany?: BookCreateManyRelationshipInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type ReflectionCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput> | ReflectionCreateWithoutRelationshipInput[] | ReflectionUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: ReflectionCreateOrConnectWithoutRelationshipInput | ReflectionCreateOrConnectWithoutRelationshipInput[]
    createMany?: ReflectionCreateManyRelationshipInputEnvelope
    connect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
  }

  export type EmotionAnalyticsCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput> | EmotionAnalyticsCreateWithoutRelationshipInput[] | EmotionAnalyticsUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: EmotionAnalyticsCreateOrConnectWithoutRelationshipInput | EmotionAnalyticsCreateOrConnectWithoutRelationshipInput[]
    createMany?: EmotionAnalyticsCreateManyRelationshipInputEnvelope
    connect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
  }

  export type InsightCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput> | InsightCreateWithoutRelationshipInput[] | InsightUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutRelationshipInput | InsightCreateOrConnectWithoutRelationshipInput[]
    createMany?: InsightCreateManyRelationshipInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type AnniversaryCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput> | AnniversaryCreateWithoutRelationshipInput[] | AnniversaryUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: AnniversaryCreateOrConnectWithoutRelationshipInput | AnniversaryCreateOrConnectWithoutRelationshipInput[]
    createMany?: AnniversaryCreateManyRelationshipInputEnvelope
    connect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
  }

  export type LetterUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput> | LetterCreateWithoutRelationshipInput[] | LetterUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutRelationshipInput | LetterCreateOrConnectWithoutRelationshipInput[]
    createMany?: LetterCreateManyRelationshipInputEnvelope
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput> | BookCreateWithoutRelationshipInput[] | BookUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: BookCreateOrConnectWithoutRelationshipInput | BookCreateOrConnectWithoutRelationshipInput[]
    createMany?: BookCreateManyRelationshipInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type ReflectionUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput> | ReflectionCreateWithoutRelationshipInput[] | ReflectionUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: ReflectionCreateOrConnectWithoutRelationshipInput | ReflectionCreateOrConnectWithoutRelationshipInput[]
    createMany?: ReflectionCreateManyRelationshipInputEnvelope
    connect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
  }

  export type EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput> | EmotionAnalyticsCreateWithoutRelationshipInput[] | EmotionAnalyticsUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: EmotionAnalyticsCreateOrConnectWithoutRelationshipInput | EmotionAnalyticsCreateOrConnectWithoutRelationshipInput[]
    createMany?: EmotionAnalyticsCreateManyRelationshipInputEnvelope
    connect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
  }

  export type InsightUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput> | InsightCreateWithoutRelationshipInput[] | InsightUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutRelationshipInput | InsightCreateOrConnectWithoutRelationshipInput[]
    createMany?: InsightCreateManyRelationshipInputEnvelope
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
  }

  export type AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput = {
    create?: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput> | AnniversaryCreateWithoutRelationshipInput[] | AnniversaryUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: AnniversaryCreateOrConnectWithoutRelationshipInput | AnniversaryCreateOrConnectWithoutRelationshipInput[]
    createMany?: AnniversaryCreateManyRelationshipInputEnvelope
    connect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutRelationships1NestedInput = {
    create?: XOR<UserCreateWithoutRelationships1Input, UserUncheckedCreateWithoutRelationships1Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelationships1Input
    upsert?: UserUpsertWithoutRelationships1Input
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelationships1Input, UserUpdateWithoutRelationships1Input>, UserUncheckedUpdateWithoutRelationships1Input>
  }

  export type UserUpdateOneWithoutRelationships2NestedInput = {
    create?: XOR<UserCreateWithoutRelationships2Input, UserUncheckedCreateWithoutRelationships2Input>
    connectOrCreate?: UserCreateOrConnectWithoutRelationships2Input
    upsert?: UserUpsertWithoutRelationships2Input
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRelationships2Input, UserUpdateWithoutRelationships2Input>, UserUncheckedUpdateWithoutRelationships2Input>
  }

  export type LetterUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput> | LetterCreateWithoutRelationshipInput[] | LetterUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutRelationshipInput | LetterCreateOrConnectWithoutRelationshipInput[]
    upsert?: LetterUpsertWithWhereUniqueWithoutRelationshipInput | LetterUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: LetterCreateManyRelationshipInputEnvelope
    set?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    disconnect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    delete?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    update?: LetterUpdateWithWhereUniqueWithoutRelationshipInput | LetterUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: LetterUpdateManyWithWhereWithoutRelationshipInput | LetterUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: LetterScalarWhereInput | LetterScalarWhereInput[]
  }

  export type BookUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput> | BookCreateWithoutRelationshipInput[] | BookUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: BookCreateOrConnectWithoutRelationshipInput | BookCreateOrConnectWithoutRelationshipInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutRelationshipInput | BookUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: BookCreateManyRelationshipInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutRelationshipInput | BookUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: BookUpdateManyWithWhereWithoutRelationshipInput | BookUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type ReflectionUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput> | ReflectionCreateWithoutRelationshipInput[] | ReflectionUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: ReflectionCreateOrConnectWithoutRelationshipInput | ReflectionCreateOrConnectWithoutRelationshipInput[]
    upsert?: ReflectionUpsertWithWhereUniqueWithoutRelationshipInput | ReflectionUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: ReflectionCreateManyRelationshipInputEnvelope
    set?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    disconnect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    delete?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    connect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    update?: ReflectionUpdateWithWhereUniqueWithoutRelationshipInput | ReflectionUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: ReflectionUpdateManyWithWhereWithoutRelationshipInput | ReflectionUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: ReflectionScalarWhereInput | ReflectionScalarWhereInput[]
  }

  export type EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput> | EmotionAnalyticsCreateWithoutRelationshipInput[] | EmotionAnalyticsUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: EmotionAnalyticsCreateOrConnectWithoutRelationshipInput | EmotionAnalyticsCreateOrConnectWithoutRelationshipInput[]
    upsert?: EmotionAnalyticsUpsertWithWhereUniqueWithoutRelationshipInput | EmotionAnalyticsUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: EmotionAnalyticsCreateManyRelationshipInputEnvelope
    set?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    disconnect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    delete?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    connect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    update?: EmotionAnalyticsUpdateWithWhereUniqueWithoutRelationshipInput | EmotionAnalyticsUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: EmotionAnalyticsUpdateManyWithWhereWithoutRelationshipInput | EmotionAnalyticsUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: EmotionAnalyticsScalarWhereInput | EmotionAnalyticsScalarWhereInput[]
  }

  export type InsightUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput> | InsightCreateWithoutRelationshipInput[] | InsightUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutRelationshipInput | InsightCreateOrConnectWithoutRelationshipInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutRelationshipInput | InsightUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: InsightCreateManyRelationshipInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutRelationshipInput | InsightUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutRelationshipInput | InsightUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type AnniversaryUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput> | AnniversaryCreateWithoutRelationshipInput[] | AnniversaryUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: AnniversaryCreateOrConnectWithoutRelationshipInput | AnniversaryCreateOrConnectWithoutRelationshipInput[]
    upsert?: AnniversaryUpsertWithWhereUniqueWithoutRelationshipInput | AnniversaryUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: AnniversaryCreateManyRelationshipInputEnvelope
    set?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    disconnect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    delete?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    connect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    update?: AnniversaryUpdateWithWhereUniqueWithoutRelationshipInput | AnniversaryUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: AnniversaryUpdateManyWithWhereWithoutRelationshipInput | AnniversaryUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: AnniversaryScalarWhereInput | AnniversaryScalarWhereInput[]
  }

  export type LetterUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput> | LetterCreateWithoutRelationshipInput[] | LetterUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: LetterCreateOrConnectWithoutRelationshipInput | LetterCreateOrConnectWithoutRelationshipInput[]
    upsert?: LetterUpsertWithWhereUniqueWithoutRelationshipInput | LetterUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: LetterCreateManyRelationshipInputEnvelope
    set?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    disconnect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    delete?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    connect?: LetterWhereUniqueInput | LetterWhereUniqueInput[]
    update?: LetterUpdateWithWhereUniqueWithoutRelationshipInput | LetterUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: LetterUpdateManyWithWhereWithoutRelationshipInput | LetterUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: LetterScalarWhereInput | LetterScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput> | BookCreateWithoutRelationshipInput[] | BookUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: BookCreateOrConnectWithoutRelationshipInput | BookCreateOrConnectWithoutRelationshipInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutRelationshipInput | BookUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: BookCreateManyRelationshipInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutRelationshipInput | BookUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: BookUpdateManyWithWhereWithoutRelationshipInput | BookUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput> | ReflectionCreateWithoutRelationshipInput[] | ReflectionUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: ReflectionCreateOrConnectWithoutRelationshipInput | ReflectionCreateOrConnectWithoutRelationshipInput[]
    upsert?: ReflectionUpsertWithWhereUniqueWithoutRelationshipInput | ReflectionUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: ReflectionCreateManyRelationshipInputEnvelope
    set?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    disconnect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    delete?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    connect?: ReflectionWhereUniqueInput | ReflectionWhereUniqueInput[]
    update?: ReflectionUpdateWithWhereUniqueWithoutRelationshipInput | ReflectionUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: ReflectionUpdateManyWithWhereWithoutRelationshipInput | ReflectionUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: ReflectionScalarWhereInput | ReflectionScalarWhereInput[]
  }

  export type EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput> | EmotionAnalyticsCreateWithoutRelationshipInput[] | EmotionAnalyticsUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: EmotionAnalyticsCreateOrConnectWithoutRelationshipInput | EmotionAnalyticsCreateOrConnectWithoutRelationshipInput[]
    upsert?: EmotionAnalyticsUpsertWithWhereUniqueWithoutRelationshipInput | EmotionAnalyticsUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: EmotionAnalyticsCreateManyRelationshipInputEnvelope
    set?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    disconnect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    delete?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    connect?: EmotionAnalyticsWhereUniqueInput | EmotionAnalyticsWhereUniqueInput[]
    update?: EmotionAnalyticsUpdateWithWhereUniqueWithoutRelationshipInput | EmotionAnalyticsUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: EmotionAnalyticsUpdateManyWithWhereWithoutRelationshipInput | EmotionAnalyticsUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: EmotionAnalyticsScalarWhereInput | EmotionAnalyticsScalarWhereInput[]
  }

  export type InsightUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput> | InsightCreateWithoutRelationshipInput[] | InsightUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: InsightCreateOrConnectWithoutRelationshipInput | InsightCreateOrConnectWithoutRelationshipInput[]
    upsert?: InsightUpsertWithWhereUniqueWithoutRelationshipInput | InsightUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: InsightCreateManyRelationshipInputEnvelope
    set?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    disconnect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    delete?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    connect?: InsightWhereUniqueInput | InsightWhereUniqueInput[]
    update?: InsightUpdateWithWhereUniqueWithoutRelationshipInput | InsightUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: InsightUpdateManyWithWhereWithoutRelationshipInput | InsightUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: InsightScalarWhereInput | InsightScalarWhereInput[]
  }

  export type AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput = {
    create?: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput> | AnniversaryCreateWithoutRelationshipInput[] | AnniversaryUncheckedCreateWithoutRelationshipInput[]
    connectOrCreate?: AnniversaryCreateOrConnectWithoutRelationshipInput | AnniversaryCreateOrConnectWithoutRelationshipInput[]
    upsert?: AnniversaryUpsertWithWhereUniqueWithoutRelationshipInput | AnniversaryUpsertWithWhereUniqueWithoutRelationshipInput[]
    createMany?: AnniversaryCreateManyRelationshipInputEnvelope
    set?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    disconnect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    delete?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    connect?: AnniversaryWhereUniqueInput | AnniversaryWhereUniqueInput[]
    update?: AnniversaryUpdateWithWhereUniqueWithoutRelationshipInput | AnniversaryUpdateWithWhereUniqueWithoutRelationshipInput[]
    updateMany?: AnniversaryUpdateManyWithWhereWithoutRelationshipInput | AnniversaryUpdateManyWithWhereWithoutRelationshipInput[]
    deleteMany?: AnniversaryScalarWhereInput | AnniversaryScalarWhereInput[]
  }

  export type RelationshipCreateNestedOneWithoutAnniversariesInput = {
    create?: XOR<RelationshipCreateWithoutAnniversariesInput, RelationshipUncheckedCreateWithoutAnniversariesInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutAnniversariesInput
    connect?: RelationshipWhereUniqueInput
  }

  export type RelationshipUpdateOneRequiredWithoutAnniversariesNestedInput = {
    create?: XOR<RelationshipCreateWithoutAnniversariesInput, RelationshipUncheckedCreateWithoutAnniversariesInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutAnniversariesInput
    upsert?: RelationshipUpsertWithoutAnniversariesInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutAnniversariesInput, RelationshipUpdateWithoutAnniversariesInput>, RelationshipUncheckedUpdateWithoutAnniversariesInput>
  }

  export type RelationshipCreateNestedOneWithoutLettersInput = {
    create?: XOR<RelationshipCreateWithoutLettersInput, RelationshipUncheckedCreateWithoutLettersInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutLettersInput
    connect?: RelationshipWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentLettersInput = {
    create?: XOR<UserCreateWithoutSentLettersInput, UserUncheckedCreateWithoutSentLettersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentLettersInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RelationshipUpdateOneRequiredWithoutLettersNestedInput = {
    create?: XOR<RelationshipCreateWithoutLettersInput, RelationshipUncheckedCreateWithoutLettersInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutLettersInput
    upsert?: RelationshipUpsertWithoutLettersInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutLettersInput, RelationshipUpdateWithoutLettersInput>, RelationshipUncheckedUpdateWithoutLettersInput>
  }

  export type UserUpdateOneRequiredWithoutSentLettersNestedInput = {
    create?: XOR<UserCreateWithoutSentLettersInput, UserUncheckedCreateWithoutSentLettersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentLettersInput
    upsert?: UserUpsertWithoutSentLettersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentLettersInput, UserUpdateWithoutSentLettersInput>, UserUncheckedUpdateWithoutSentLettersInput>
  }

  export type RelationshipCreateNestedOneWithoutBooksInput = {
    create?: XOR<RelationshipCreateWithoutBooksInput, RelationshipUncheckedCreateWithoutBooksInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutBooksInput
    connect?: RelationshipWhereUniqueInput
  }

  export type RelationshipUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<RelationshipCreateWithoutBooksInput, RelationshipUncheckedCreateWithoutBooksInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutBooksInput
    upsert?: RelationshipUpsertWithoutBooksInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutBooksInput, RelationshipUpdateWithoutBooksInput>, RelationshipUncheckedUpdateWithoutBooksInput>
  }

  export type RelationshipCreateNestedOneWithoutReflectionsInput = {
    create?: XOR<RelationshipCreateWithoutReflectionsInput, RelationshipUncheckedCreateWithoutReflectionsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutReflectionsInput
    connect?: RelationshipWhereUniqueInput
  }

  export type RelationshipUpdateOneRequiredWithoutReflectionsNestedInput = {
    create?: XOR<RelationshipCreateWithoutReflectionsInput, RelationshipUncheckedCreateWithoutReflectionsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutReflectionsInput
    upsert?: RelationshipUpsertWithoutReflectionsInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutReflectionsInput, RelationshipUpdateWithoutReflectionsInput>, RelationshipUncheckedUpdateWithoutReflectionsInput>
  }

  export type RelationshipCreateNestedOneWithoutAnalyticsInput = {
    create?: XOR<RelationshipCreateWithoutAnalyticsInput, RelationshipUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutAnalyticsInput
    connect?: RelationshipWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RelationshipUpdateOneRequiredWithoutAnalyticsNestedInput = {
    create?: XOR<RelationshipCreateWithoutAnalyticsInput, RelationshipUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutAnalyticsInput
    upsert?: RelationshipUpsertWithoutAnalyticsInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutAnalyticsInput, RelationshipUpdateWithoutAnalyticsInput>, RelationshipUncheckedUpdateWithoutAnalyticsInput>
  }

  export type RelationshipCreateNestedOneWithoutInsightsInput = {
    create?: XOR<RelationshipCreateWithoutInsightsInput, RelationshipUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutInsightsInput
    connect?: RelationshipWhereUniqueInput
  }

  export type RelationshipUpdateOneRequiredWithoutInsightsNestedInput = {
    create?: XOR<RelationshipCreateWithoutInsightsInput, RelationshipUncheckedCreateWithoutInsightsInput>
    connectOrCreate?: RelationshipCreateOrConnectWithoutInsightsInput
    upsert?: RelationshipUpsertWithoutInsightsInput
    connect?: RelationshipWhereUniqueInput
    update?: XOR<XOR<RelationshipUpdateToOneWithWhereWithoutInsightsInput, RelationshipUpdateWithoutInsightsInput>, RelationshipUncheckedUpdateWithoutInsightsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LetterCreateWithoutSenderInput = {
    id?: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
    relationship: RelationshipCreateNestedOneWithoutLettersInput
  }

  export type LetterUncheckedCreateWithoutSenderInput = {
    id?: string
    relationshipId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LetterCreateOrConnectWithoutSenderInput = {
    where: LetterWhereUniqueInput
    create: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput>
  }

  export type LetterCreateManySenderInputEnvelope = {
    data: LetterCreateManySenderInput | LetterCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type RelationshipCreateWithoutUser1Input = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutUser1Input = {
    id?: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input>
  }

  export type RelationshipCreateManyUser1InputEnvelope = {
    data: RelationshipCreateManyUser1Input | RelationshipCreateManyUser1Input[]
    skipDuplicates?: boolean
  }

  export type RelationshipCreateWithoutUser2Input = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutUser2Input = {
    id?: string
    user1Id: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input>
  }

  export type RelationshipCreateManyUser2InputEnvelope = {
    data: RelationshipCreateManyUser2Input | RelationshipCreateManyUser2Input[]
    skipDuplicates?: boolean
  }

  export type LetterUpsertWithWhereUniqueWithoutSenderInput = {
    where: LetterWhereUniqueInput
    update: XOR<LetterUpdateWithoutSenderInput, LetterUncheckedUpdateWithoutSenderInput>
    create: XOR<LetterCreateWithoutSenderInput, LetterUncheckedCreateWithoutSenderInput>
  }

  export type LetterUpdateWithWhereUniqueWithoutSenderInput = {
    where: LetterWhereUniqueInput
    data: XOR<LetterUpdateWithoutSenderInput, LetterUncheckedUpdateWithoutSenderInput>
  }

  export type LetterUpdateManyWithWhereWithoutSenderInput = {
    where: LetterScalarWhereInput
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyWithoutSenderInput>
  }

  export type LetterScalarWhereInput = {
    AND?: LetterScalarWhereInput | LetterScalarWhereInput[]
    OR?: LetterScalarWhereInput[]
    NOT?: LetterScalarWhereInput | LetterScalarWhereInput[]
    id?: StringFilter<"Letter"> | string
    relationshipId?: StringFilter<"Letter"> | string
    senderId?: StringFilter<"Letter"> | string
    content?: StringFilter<"Letter"> | string
    imageUrl?: StringNullableFilter<"Letter"> | string | null
    voiceUrl?: StringNullableFilter<"Letter"> | string | null
    isSecret?: BoolFilter<"Letter"> | boolean
    openAt?: DateTimeNullableFilter<"Letter"> | Date | string | null
    createdAt?: DateTimeFilter<"Letter"> | Date | string
  }

  export type RelationshipUpsertWithWhereUniqueWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    update: XOR<RelationshipUpdateWithoutUser1Input, RelationshipUncheckedUpdateWithoutUser1Input>
    create: XOR<RelationshipCreateWithoutUser1Input, RelationshipUncheckedCreateWithoutUser1Input>
  }

  export type RelationshipUpdateWithWhereUniqueWithoutUser1Input = {
    where: RelationshipWhereUniqueInput
    data: XOR<RelationshipUpdateWithoutUser1Input, RelationshipUncheckedUpdateWithoutUser1Input>
  }

  export type RelationshipUpdateManyWithWhereWithoutUser1Input = {
    where: RelationshipScalarWhereInput
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyWithoutUser1Input>
  }

  export type RelationshipScalarWhereInput = {
    AND?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
    OR?: RelationshipScalarWhereInput[]
    NOT?: RelationshipScalarWhereInput | RelationshipScalarWhereInput[]
    id?: StringFilter<"Relationship"> | string
    user1Id?: StringFilter<"Relationship"> | string
    user2Id?: StringNullableFilter<"Relationship"> | string | null
    inviteCode?: StringFilter<"Relationship"> | string
    connectedAt?: DateTimeNullableFilter<"Relationship"> | Date | string | null
    createdAt?: DateTimeFilter<"Relationship"> | Date | string
  }

  export type RelationshipUpsertWithWhereUniqueWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    update: XOR<RelationshipUpdateWithoutUser2Input, RelationshipUncheckedUpdateWithoutUser2Input>
    create: XOR<RelationshipCreateWithoutUser2Input, RelationshipUncheckedCreateWithoutUser2Input>
  }

  export type RelationshipUpdateWithWhereUniqueWithoutUser2Input = {
    where: RelationshipWhereUniqueInput
    data: XOR<RelationshipUpdateWithoutUser2Input, RelationshipUncheckedUpdateWithoutUser2Input>
  }

  export type RelationshipUpdateManyWithWhereWithoutUser2Input = {
    where: RelationshipScalarWhereInput
    data: XOR<RelationshipUpdateManyMutationInput, RelationshipUncheckedUpdateManyWithoutUser2Input>
  }

  export type UserCreateWithoutRelationships1Input = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterCreateNestedManyWithoutSenderInput
    relationships2?: RelationshipCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutRelationships1Input = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterUncheckedCreateNestedManyWithoutSenderInput
    relationships2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutRelationships1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelationships1Input, UserUncheckedCreateWithoutRelationships1Input>
  }

  export type UserCreateWithoutRelationships2Input = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterCreateNestedManyWithoutSenderInput
    relationships1?: RelationshipCreateNestedManyWithoutUser1Input
  }

  export type UserUncheckedCreateWithoutRelationships2Input = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    sentLetters?: LetterUncheckedCreateNestedManyWithoutSenderInput
    relationships1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
  }

  export type UserCreateOrConnectWithoutRelationships2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRelationships2Input, UserUncheckedCreateWithoutRelationships2Input>
  }

  export type LetterCreateWithoutRelationshipInput = {
    id?: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentLettersInput
  }

  export type LetterUncheckedCreateWithoutRelationshipInput = {
    id?: string
    senderId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LetterCreateOrConnectWithoutRelationshipInput = {
    where: LetterWhereUniqueInput
    create: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput>
  }

  export type LetterCreateManyRelationshipInputEnvelope = {
    data: LetterCreateManyRelationshipInput | LetterCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutRelationshipInput = {
    id?: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
  }

  export type BookUncheckedCreateWithoutRelationshipInput = {
    id?: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
  }

  export type BookCreateOrConnectWithoutRelationshipInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput>
  }

  export type BookCreateManyRelationshipInputEnvelope = {
    data: BookCreateManyRelationshipInput | BookCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type ReflectionCreateWithoutRelationshipInput = {
    id?: string
    type: string
    resultText: string
    createdAt?: Date | string
  }

  export type ReflectionUncheckedCreateWithoutRelationshipInput = {
    id?: string
    type: string
    resultText: string
    createdAt?: Date | string
  }

  export type ReflectionCreateOrConnectWithoutRelationshipInput = {
    where: ReflectionWhereUniqueInput
    create: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput>
  }

  export type ReflectionCreateManyRelationshipInputEnvelope = {
    data: ReflectionCreateManyRelationshipInput | ReflectionCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type EmotionAnalyticsCreateWithoutRelationshipInput = {
    id?: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
  }

  export type EmotionAnalyticsUncheckedCreateWithoutRelationshipInput = {
    id?: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
  }

  export type EmotionAnalyticsCreateOrConnectWithoutRelationshipInput = {
    where: EmotionAnalyticsWhereUniqueInput
    create: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput>
  }

  export type EmotionAnalyticsCreateManyRelationshipInputEnvelope = {
    data: EmotionAnalyticsCreateManyRelationshipInput | EmotionAnalyticsCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type InsightCreateWithoutRelationshipInput = {
    id?: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
  }

  export type InsightUncheckedCreateWithoutRelationshipInput = {
    id?: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
  }

  export type InsightCreateOrConnectWithoutRelationshipInput = {
    where: InsightWhereUniqueInput
    create: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput>
  }

  export type InsightCreateManyRelationshipInputEnvelope = {
    data: InsightCreateManyRelationshipInput | InsightCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type AnniversaryCreateWithoutRelationshipInput = {
    id?: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
  }

  export type AnniversaryUncheckedCreateWithoutRelationshipInput = {
    id?: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
  }

  export type AnniversaryCreateOrConnectWithoutRelationshipInput = {
    where: AnniversaryWhereUniqueInput
    create: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput>
  }

  export type AnniversaryCreateManyRelationshipInputEnvelope = {
    data: AnniversaryCreateManyRelationshipInput | AnniversaryCreateManyRelationshipInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRelationships1Input = {
    update: XOR<UserUpdateWithoutRelationships1Input, UserUncheckedUpdateWithoutRelationships1Input>
    create: XOR<UserCreateWithoutRelationships1Input, UserUncheckedCreateWithoutRelationships1Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelationships1Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelationships1Input, UserUncheckedUpdateWithoutRelationships1Input>
  }

  export type UserUpdateWithoutRelationships1Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUpdateManyWithoutSenderNestedInput
    relationships2?: RelationshipUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutRelationships1Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUncheckedUpdateManyWithoutSenderNestedInput
    relationships2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type UserUpsertWithoutRelationships2Input = {
    update: XOR<UserUpdateWithoutRelationships2Input, UserUncheckedUpdateWithoutRelationships2Input>
    create: XOR<UserCreateWithoutRelationships2Input, UserUncheckedCreateWithoutRelationships2Input>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRelationships2Input = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRelationships2Input, UserUncheckedUpdateWithoutRelationships2Input>
  }

  export type UserUpdateWithoutRelationships2Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUpdateManyWithoutSenderNestedInput
    relationships1?: RelationshipUpdateManyWithoutUser1NestedInput
  }

  export type UserUncheckedUpdateWithoutRelationships2Input = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentLetters?: LetterUncheckedUpdateManyWithoutSenderNestedInput
    relationships1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
  }

  export type LetterUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: LetterWhereUniqueInput
    update: XOR<LetterUpdateWithoutRelationshipInput, LetterUncheckedUpdateWithoutRelationshipInput>
    create: XOR<LetterCreateWithoutRelationshipInput, LetterUncheckedCreateWithoutRelationshipInput>
  }

  export type LetterUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: LetterWhereUniqueInput
    data: XOR<LetterUpdateWithoutRelationshipInput, LetterUncheckedUpdateWithoutRelationshipInput>
  }

  export type LetterUpdateManyWithWhereWithoutRelationshipInput = {
    where: LetterScalarWhereInput
    data: XOR<LetterUpdateManyMutationInput, LetterUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type BookUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutRelationshipInput, BookUncheckedUpdateWithoutRelationshipInput>
    create: XOR<BookCreateWithoutRelationshipInput, BookUncheckedCreateWithoutRelationshipInput>
  }

  export type BookUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutRelationshipInput, BookUncheckedUpdateWithoutRelationshipInput>
  }

  export type BookUpdateManyWithWhereWithoutRelationshipInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type BookScalarWhereInput = {
    AND?: BookScalarWhereInput | BookScalarWhereInput[]
    OR?: BookScalarWhereInput[]
    NOT?: BookScalarWhereInput | BookScalarWhereInput[]
    id?: StringFilter<"Book"> | string
    relationshipId?: StringFilter<"Book"> | string
    title?: StringFilter<"Book"> | string
    pdfUrl?: StringFilter<"Book"> | string
    status?: StringFilter<"Book"> | string
    generatedAt?: DateTimeFilter<"Book"> | Date | string
  }

  export type ReflectionUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: ReflectionWhereUniqueInput
    update: XOR<ReflectionUpdateWithoutRelationshipInput, ReflectionUncheckedUpdateWithoutRelationshipInput>
    create: XOR<ReflectionCreateWithoutRelationshipInput, ReflectionUncheckedCreateWithoutRelationshipInput>
  }

  export type ReflectionUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: ReflectionWhereUniqueInput
    data: XOR<ReflectionUpdateWithoutRelationshipInput, ReflectionUncheckedUpdateWithoutRelationshipInput>
  }

  export type ReflectionUpdateManyWithWhereWithoutRelationshipInput = {
    where: ReflectionScalarWhereInput
    data: XOR<ReflectionUpdateManyMutationInput, ReflectionUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type ReflectionScalarWhereInput = {
    AND?: ReflectionScalarWhereInput | ReflectionScalarWhereInput[]
    OR?: ReflectionScalarWhereInput[]
    NOT?: ReflectionScalarWhereInput | ReflectionScalarWhereInput[]
    id?: StringFilter<"Reflection"> | string
    relationshipId?: StringFilter<"Reflection"> | string
    type?: StringFilter<"Reflection"> | string
    resultText?: StringFilter<"Reflection"> | string
    createdAt?: DateTimeFilter<"Reflection"> | Date | string
  }

  export type EmotionAnalyticsUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: EmotionAnalyticsWhereUniqueInput
    update: XOR<EmotionAnalyticsUpdateWithoutRelationshipInput, EmotionAnalyticsUncheckedUpdateWithoutRelationshipInput>
    create: XOR<EmotionAnalyticsCreateWithoutRelationshipInput, EmotionAnalyticsUncheckedCreateWithoutRelationshipInput>
  }

  export type EmotionAnalyticsUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: EmotionAnalyticsWhereUniqueInput
    data: XOR<EmotionAnalyticsUpdateWithoutRelationshipInput, EmotionAnalyticsUncheckedUpdateWithoutRelationshipInput>
  }

  export type EmotionAnalyticsUpdateManyWithWhereWithoutRelationshipInput = {
    where: EmotionAnalyticsScalarWhereInput
    data: XOR<EmotionAnalyticsUpdateManyMutationInput, EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type EmotionAnalyticsScalarWhereInput = {
    AND?: EmotionAnalyticsScalarWhereInput | EmotionAnalyticsScalarWhereInput[]
    OR?: EmotionAnalyticsScalarWhereInput[]
    NOT?: EmotionAnalyticsScalarWhereInput | EmotionAnalyticsScalarWhereInput[]
    id?: StringFilter<"EmotionAnalytics"> | string
    relationshipId?: StringFilter<"EmotionAnalytics"> | string
    positive?: IntFilter<"EmotionAnalytics"> | number
    neutral?: IntFilter<"EmotionAnalytics"> | number
    negative?: IntFilter<"EmotionAnalytics"> | number
    analyzedAt?: DateTimeFilter<"EmotionAnalytics"> | Date | string
  }

  export type InsightUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: InsightWhereUniqueInput
    update: XOR<InsightUpdateWithoutRelationshipInput, InsightUncheckedUpdateWithoutRelationshipInput>
    create: XOR<InsightCreateWithoutRelationshipInput, InsightUncheckedCreateWithoutRelationshipInput>
  }

  export type InsightUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: InsightWhereUniqueInput
    data: XOR<InsightUpdateWithoutRelationshipInput, InsightUncheckedUpdateWithoutRelationshipInput>
  }

  export type InsightUpdateManyWithWhereWithoutRelationshipInput = {
    where: InsightScalarWhereInput
    data: XOR<InsightUpdateManyMutationInput, InsightUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type InsightScalarWhereInput = {
    AND?: InsightScalarWhereInput | InsightScalarWhereInput[]
    OR?: InsightScalarWhereInput[]
    NOT?: InsightScalarWhereInput | InsightScalarWhereInput[]
    id?: StringFilter<"Insight"> | string
    relationshipId?: StringFilter<"Insight"> | string
    summary?: StringFilter<"Insight"> | string
    style?: StringFilter<"Insight"> | string
    recentEmotion?: StringFilter<"Insight"> | string
    suggestion?: StringFilter<"Insight"> | string
    createdAt?: DateTimeFilter<"Insight"> | Date | string
  }

  export type AnniversaryUpsertWithWhereUniqueWithoutRelationshipInput = {
    where: AnniversaryWhereUniqueInput
    update: XOR<AnniversaryUpdateWithoutRelationshipInput, AnniversaryUncheckedUpdateWithoutRelationshipInput>
    create: XOR<AnniversaryCreateWithoutRelationshipInput, AnniversaryUncheckedCreateWithoutRelationshipInput>
  }

  export type AnniversaryUpdateWithWhereUniqueWithoutRelationshipInput = {
    where: AnniversaryWhereUniqueInput
    data: XOR<AnniversaryUpdateWithoutRelationshipInput, AnniversaryUncheckedUpdateWithoutRelationshipInput>
  }

  export type AnniversaryUpdateManyWithWhereWithoutRelationshipInput = {
    where: AnniversaryScalarWhereInput
    data: XOR<AnniversaryUpdateManyMutationInput, AnniversaryUncheckedUpdateManyWithoutRelationshipInput>
  }

  export type AnniversaryScalarWhereInput = {
    AND?: AnniversaryScalarWhereInput | AnniversaryScalarWhereInput[]
    OR?: AnniversaryScalarWhereInput[]
    NOT?: AnniversaryScalarWhereInput | AnniversaryScalarWhereInput[]
    id?: StringFilter<"Anniversary"> | string
    relationshipId?: StringFilter<"Anniversary"> | string
    title?: StringFilter<"Anniversary"> | string
    date?: DateTimeFilter<"Anniversary"> | Date | string
    type?: StringFilter<"Anniversary"> | string
    createdAt?: DateTimeFilter<"Anniversary"> | Date | string
  }

  export type RelationshipCreateWithoutAnniversariesInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutAnniversariesInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutAnniversariesInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutAnniversariesInput, RelationshipUncheckedCreateWithoutAnniversariesInput>
  }

  export type RelationshipUpsertWithoutAnniversariesInput = {
    update: XOR<RelationshipUpdateWithoutAnniversariesInput, RelationshipUncheckedUpdateWithoutAnniversariesInput>
    create: XOR<RelationshipCreateWithoutAnniversariesInput, RelationshipUncheckedCreateWithoutAnniversariesInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutAnniversariesInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutAnniversariesInput, RelationshipUncheckedUpdateWithoutAnniversariesInput>
  }

  export type RelationshipUpdateWithoutAnniversariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutAnniversariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipCreateWithoutLettersInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutLettersInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutLettersInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutLettersInput, RelationshipUncheckedCreateWithoutLettersInput>
  }

  export type UserCreateWithoutSentLettersInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    relationships1?: RelationshipCreateNestedManyWithoutUser1Input
    relationships2?: RelationshipCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutSentLettersInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    relationships1?: RelationshipUncheckedCreateNestedManyWithoutUser1Input
    relationships2?: RelationshipUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutSentLettersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentLettersInput, UserUncheckedCreateWithoutSentLettersInput>
  }

  export type RelationshipUpsertWithoutLettersInput = {
    update: XOR<RelationshipUpdateWithoutLettersInput, RelationshipUncheckedUpdateWithoutLettersInput>
    create: XOR<RelationshipCreateWithoutLettersInput, RelationshipUncheckedCreateWithoutLettersInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutLettersInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutLettersInput, RelationshipUncheckedUpdateWithoutLettersInput>
  }

  export type RelationshipUpdateWithoutLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type UserUpsertWithoutSentLettersInput = {
    update: XOR<UserUpdateWithoutSentLettersInput, UserUncheckedUpdateWithoutSentLettersInput>
    create: XOR<UserCreateWithoutSentLettersInput, UserUncheckedCreateWithoutSentLettersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentLettersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentLettersInput, UserUncheckedUpdateWithoutSentLettersInput>
  }

  export type UserUpdateWithoutSentLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationships1?: RelationshipUpdateManyWithoutUser1NestedInput
    relationships2?: RelationshipUpdateManyWithoutUser2NestedInput
  }

  export type UserUncheckedUpdateWithoutSentLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationships1?: RelationshipUncheckedUpdateManyWithoutUser1NestedInput
    relationships2?: RelationshipUncheckedUpdateManyWithoutUser2NestedInput
  }

  export type RelationshipCreateWithoutBooksInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutBooksInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutBooksInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutBooksInput, RelationshipUncheckedCreateWithoutBooksInput>
  }

  export type RelationshipUpsertWithoutBooksInput = {
    update: XOR<RelationshipUpdateWithoutBooksInput, RelationshipUncheckedUpdateWithoutBooksInput>
    create: XOR<RelationshipCreateWithoutBooksInput, RelationshipUncheckedCreateWithoutBooksInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutBooksInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutBooksInput, RelationshipUncheckedUpdateWithoutBooksInput>
  }

  export type RelationshipUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipCreateWithoutReflectionsInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutReflectionsInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutReflectionsInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutReflectionsInput, RelationshipUncheckedCreateWithoutReflectionsInput>
  }

  export type RelationshipUpsertWithoutReflectionsInput = {
    update: XOR<RelationshipUpdateWithoutReflectionsInput, RelationshipUncheckedUpdateWithoutReflectionsInput>
    create: XOR<RelationshipCreateWithoutReflectionsInput, RelationshipUncheckedCreateWithoutReflectionsInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutReflectionsInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutReflectionsInput, RelationshipUncheckedUpdateWithoutReflectionsInput>
  }

  export type RelationshipUpdateWithoutReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutReflectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipCreateWithoutAnalyticsInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    insights?: InsightCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutAnalyticsInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    insights?: InsightUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutAnalyticsInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutAnalyticsInput, RelationshipUncheckedCreateWithoutAnalyticsInput>
  }

  export type RelationshipUpsertWithoutAnalyticsInput = {
    update: XOR<RelationshipUpdateWithoutAnalyticsInput, RelationshipUncheckedUpdateWithoutAnalyticsInput>
    create: XOR<RelationshipCreateWithoutAnalyticsInput, RelationshipUncheckedCreateWithoutAnalyticsInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutAnalyticsInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutAnalyticsInput, RelationshipUncheckedUpdateWithoutAnalyticsInput>
  }

  export type RelationshipUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipCreateWithoutInsightsInput = {
    id?: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    user1: UserCreateNestedOneWithoutRelationships1Input
    user2?: UserCreateNestedOneWithoutRelationships2Input
    letters?: LetterCreateNestedManyWithoutRelationshipInput
    books?: BookCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipUncheckedCreateWithoutInsightsInput = {
    id?: string
    user1Id: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
    letters?: LetterUncheckedCreateNestedManyWithoutRelationshipInput
    books?: BookUncheckedCreateNestedManyWithoutRelationshipInput
    reflections?: ReflectionUncheckedCreateNestedManyWithoutRelationshipInput
    analytics?: EmotionAnalyticsUncheckedCreateNestedManyWithoutRelationshipInput
    anniversaries?: AnniversaryUncheckedCreateNestedManyWithoutRelationshipInput
  }

  export type RelationshipCreateOrConnectWithoutInsightsInput = {
    where: RelationshipWhereUniqueInput
    create: XOR<RelationshipCreateWithoutInsightsInput, RelationshipUncheckedCreateWithoutInsightsInput>
  }

  export type RelationshipUpsertWithoutInsightsInput = {
    update: XOR<RelationshipUpdateWithoutInsightsInput, RelationshipUncheckedUpdateWithoutInsightsInput>
    create: XOR<RelationshipCreateWithoutInsightsInput, RelationshipUncheckedCreateWithoutInsightsInput>
    where?: RelationshipWhereInput
  }

  export type RelationshipUpdateToOneWithWhereWithoutInsightsInput = {
    where?: RelationshipWhereInput
    data: XOR<RelationshipUpdateWithoutInsightsInput, RelationshipUncheckedUpdateWithoutInsightsInput>
  }

  export type RelationshipUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutInsightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type LetterCreateManySenderInput = {
    id?: string
    relationshipId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RelationshipCreateManyUser1Input = {
    id?: string
    user2Id?: string | null
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type RelationshipCreateManyUser2Input = {
    id?: string
    user1Id: string
    inviteCode: string
    connectedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LetterUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relationship?: RelationshipUpdateOneRequiredWithoutLettersNestedInput
  }

  export type LetterUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelationshipUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user2?: UserUpdateOneWithoutRelationships2NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateManyWithoutUser1Input = {
    id?: StringFieldUpdateOperationsInput | string
    user2Id?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelationshipUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user1?: UserUpdateOneRequiredWithoutRelationships1NestedInput
    letters?: LetterUpdateManyWithoutRelationshipNestedInput
    books?: BookUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    letters?: LetterUncheckedUpdateManyWithoutRelationshipNestedInput
    books?: BookUncheckedUpdateManyWithoutRelationshipNestedInput
    reflections?: ReflectionUncheckedUpdateManyWithoutRelationshipNestedInput
    analytics?: EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipNestedInput
    insights?: InsightUncheckedUpdateManyWithoutRelationshipNestedInput
    anniversaries?: AnniversaryUncheckedUpdateManyWithoutRelationshipNestedInput
  }

  export type RelationshipUncheckedUpdateManyWithoutUser2Input = {
    id?: StringFieldUpdateOperationsInput | string
    user1Id?: StringFieldUpdateOperationsInput | string
    inviteCode?: StringFieldUpdateOperationsInput | string
    connectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterCreateManyRelationshipInput = {
    id?: string
    senderId: string
    content: string
    imageUrl?: string | null
    voiceUrl?: string | null
    isSecret?: boolean
    openAt?: Date | string | null
    createdAt?: Date | string
  }

  export type BookCreateManyRelationshipInput = {
    id?: string
    title: string
    pdfUrl: string
    status: string
    generatedAt: Date | string
  }

  export type ReflectionCreateManyRelationshipInput = {
    id?: string
    type: string
    resultText: string
    createdAt?: Date | string
  }

  export type EmotionAnalyticsCreateManyRelationshipInput = {
    id?: string
    positive: number
    neutral: number
    negative: number
    analyzedAt: Date | string
  }

  export type InsightCreateManyRelationshipInput = {
    id?: string
    summary: string
    style: string
    recentEmotion: string
    suggestion: string
    createdAt?: Date | string
  }

  export type AnniversaryCreateManyRelationshipInput = {
    id?: string
    title: string
    date: Date | string
    type: string
    createdAt?: Date | string
  }

  export type LetterUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentLettersNestedInput
  }

  export type LetterUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    voiceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSecret?: BoolFieldUpdateOperationsInput | boolean
    openAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReflectionUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    resultText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmotionAnalyticsUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    positive?: IntFieldUpdateOperationsInput | number
    neutral?: IntFieldUpdateOperationsInput | number
    negative?: IntFieldUpdateOperationsInput | number
    analyzedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InsightUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    summary?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    recentEmotion?: StringFieldUpdateOperationsInput | string
    suggestion?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryUncheckedUpdateWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnniversaryUncheckedUpdateManyWithoutRelationshipInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}