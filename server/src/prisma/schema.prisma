generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  sentLetters Letter[] @relation("SentLetters")
  relationships1 Relationship[] @relation("User1")
  relationships2 Relationship[] @relation("User2")
}

model Relationship {
  id         String   @id @default(uuid())
  user1      User     @relation("User1", fields: [user1Id], references: [id])
  user2      User     @relation("User2", fields: [user2Id], references: [id])
  user1Id    String
  user2Id    String
  inviteCode String   @unique
  connectedAt DateTime?
  createdAt  DateTime @default(now())

  letters      Letter[]
  books        Book[]
  reflections  Reflection[]
  analytics    EmotionAnalytics[]
  insights     Insight[]
  anniversaries Anniversary[]
}

model Anniversary {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  title           String
  date            DateTime
  type            String // 'system' or 'custom'
  createdAt       DateTime @default(now())
}

model Letter {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  sender          User     @relation("SentLetters", fields: [senderId], references: [id])
  senderId        String
  content         String
  imageUrl        String?
  voiceUrl        String?
  isSecret        Boolean  @default(false)
  openAt          DateTime?
  createdAt       DateTime @default(now())
}

model Book {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  title           String
  pdfUrl          String
  status          String
  generatedAt     DateTime
}

model Reflection {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  type            String  // 'summary' or 'emotion_trend'
  resultText      String
  createdAt       DateTime @default(now())
}

model EmotionAnalytics {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  positive        Int
  neutral         Int
  negative        Int
  analyzedAt      DateTime
}

model Insight {
  id              String   @id @default(uuid())
  relationship    Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId  String
  summary         String
  style           String
  recentEmotion   String
  suggestion      String
  createdAt       DateTime @default(now())
}
